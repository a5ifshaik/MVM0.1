
MVM0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a40  08003a40  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a48  08003a48  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  10000000  08003a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000074  10000074  00020074  2**0
                  CONTENTS
 10 .bss          00016da4  20000000  20000000  00030000  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20016da4  20016da4  00030000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005cfa  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011a9  00000000  00000000  00025de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007e8  00000000  00000000  00026f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005d3  00000000  00000000  00027778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001099a  00000000  00000000  00027d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006665  00000000  00000000  000386e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00055546  00000000  00000000  0003ed4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000029fc  00000000  00000000  00094290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00096c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003864 	.word	0x08003864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	08003864 	.word	0x08003864

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <NVIC_PriorityGroupConfig+0x24>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	60d3      	str	r3, [r2, #12]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	2300      	movs	r3, #0
 80005a2:	73bb      	strb	r3, [r7, #14]
 80005a4:	230f      	movs	r3, #15
 80005a6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	78db      	ldrb	r3, [r3, #3]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d039      	beq.n	8000624 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <NVIC_Init+0xbc>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	43db      	mvns	r3, r3
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f1c3 0304 	rsb	r3, r3, #4
 80005c6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80005c8:	7b7a      	ldrb	r2, [r7, #13]
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	fa42 f303 	asr.w	r3, r2, r3
 80005d0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	785b      	ldrb	r3, [r3, #1]
 80005d6:	461a      	mov	r2, r3
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	789a      	ldrb	r2, [r3, #2]
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	4013      	ands	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <NVIC_Init+0xc0>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4413      	add	r3, r2
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800060c:	4911      	ldr	r1, [pc, #68]	; (8000654 <NVIC_Init+0xc0>)
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	0952      	lsrs	r2, r2, #5
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000618:	2201      	movs	r2, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800061e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000622:	e00f      	b.n	8000644 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800062c:	4909      	ldr	r1, [pc, #36]	; (8000654 <NVIC_Init+0xc0>)
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	0952      	lsrs	r2, r2, #5
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000638:	2201      	movs	r2, #1
 800063a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800063c:	f100 0320 	add.w	r3, r0, #32
 8000640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	e000e100 	.word	0xe000e100

08000658 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <DCMI_DeInit+0x38>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <DCMI_DeInit+0x38>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <DCMI_DeInit+0x38>)
 800066a:	221f      	movs	r2, #31
 800066c:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <DCMI_DeInit+0x38>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <DCMI_DeInit+0x38>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <DCMI_DeInit+0x38>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <DCMI_DeInit+0x38>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	50050000 	.word	0x50050000

08000694 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <DCMI_Init+0x7c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <DCMI_Init+0x7c>)
 80006a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <DCMI_Init+0x7c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80006bc:	f023 0302 	bic.w	r3, r3, #2
 80006c0:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_PCKPolarity |
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_VSPolarity |
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80006da:	4313      	orrs	r3, r2
 80006dc:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_HSPolarity |
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	895b      	ldrh	r3, [r3, #10]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	899b      	ldrh	r3, [r3, #12]
                     DCMI_InitStruct->DCMI_CaptureRate |
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	461a      	mov	r2, r3
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]

  DCMI->CR = temp;                              
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <DCMI_Init+0x7c>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	50050000 	.word	0x50050000

08000714 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <DCMI_Cmd+0x38>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a08      	ldr	r2, [pc, #32]	; (800074c <DCMI_Cmd+0x38>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
  }
}
 8000730:	e005      	b.n	800073e <DCMI_Cmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <DCMI_Cmd+0x38>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <DCMI_Cmd+0x38>)
 8000738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800073c:	6013      	str	r3, [r2, #0]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	50050000 	.word	0x50050000

08000750 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d006      	beq.n	800076e <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <DCMI_CaptureCmd+0x38>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a08      	ldr	r2, [pc, #32]	; (8000788 <DCMI_CaptureCmd+0x38>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
  }
}
 800076c:	e005      	b.n	800077a <DCMI_CaptureCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <DCMI_CaptureCmd+0x38>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <DCMI_CaptureCmd+0x38>)
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	50050000 	.word	0x50050000

0800078c <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	80fb      	strh	r3, [r7, #6]
 8000798:	4613      	mov	r3, r2
 800079a:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800079c:	797b      	ldrb	r3, [r7, #5]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d006      	beq.n	80007b0 <DCMI_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <DCMI_ITConfig+0x44>)
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	4909      	ldr	r1, [pc, #36]	; (80007d0 <DCMI_ITConfig+0x44>)
 80007aa:	4313      	orrs	r3, r2
 80007ac:	60cb      	str	r3, [r1, #12]
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
  }  
}
 80007ae:	e008      	b.n	80007c2 <DCMI_ITConfig+0x36>
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <DCMI_ITConfig+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	88fa      	ldrh	r2, [r7, #6]
 80007b6:	43d2      	mvns	r2, r2
 80007b8:	b292      	uxth	r2, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <DCMI_ITConfig+0x44>)
 80007be:	400b      	ands	r3, r1
 80007c0:	60d3      	str	r3, [r2, #12]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	50050000 	.word	0x50050000

080007d4 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	0b1b      	lsrs	r3, r3, #12
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d103      	bne.n	80007fc <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <DCMI_GetFlagStatus+0x60>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	e009      	b.n	8000810 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d103      	bne.n	800080a <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <DCMI_GetFlagStatus+0x60>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	e002      	b.n	8000810 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <DCMI_GetFlagStatus+0x60>)
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 800081a:	2301      	movs	r3, #1
 800081c:	75fb      	strb	r3, [r7, #23]
 800081e:	e001      	b.n	8000824 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8000824:	7dfb      	ldrb	r3, [r7, #23]
}
 8000826:	4618      	mov	r0, r3
 8000828:	371c      	adds	r7, #28
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	50050000 	.word	0x50050000

08000838 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <DCMI_ClearFlag+0x1c>)
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	6153      	str	r3, [r2, #20]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	50050000 	.word	0x50050000

08000858 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 0201 	bic.w	r2, r3, #1
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2221      	movs	r2, #33	; 0x21
 800088e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a46      	ldr	r2, [pc, #280]	; (80009ac <DMA_DeInit+0x154>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d103      	bne.n	80008a0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000898:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <DMA_DeInit+0x158>)
 800089a:	223d      	movs	r2, #61	; 0x3d
 800089c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800089e:	e07e      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <DMA_DeInit+0x15c>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d104      	bne.n	80008b2 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80008a8:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <DMA_DeInit+0x158>)
 80008aa:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80008ae:	609a      	str	r2, [r3, #8]
}
 80008b0:	e075      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a40      	ldr	r2, [pc, #256]	; (80009b8 <DMA_DeInit+0x160>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d104      	bne.n	80008c4 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80008ba:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <DMA_DeInit+0x158>)
 80008bc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80008c0:	609a      	str	r2, [r3, #8]
}
 80008c2:	e06c      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <DMA_DeInit+0x164>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d104      	bne.n	80008d6 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80008cc:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <DMA_DeInit+0x158>)
 80008ce:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80008d2:	609a      	str	r2, [r3, #8]
}
 80008d4:	e063      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a39      	ldr	r2, [pc, #228]	; (80009c0 <DMA_DeInit+0x168>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d103      	bne.n	80008e6 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80008de:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <DMA_DeInit+0x158>)
 80008e0:	4a38      	ldr	r2, [pc, #224]	; (80009c4 <DMA_DeInit+0x16c>)
 80008e2:	60da      	str	r2, [r3, #12]
}
 80008e4:	e05b      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a37      	ldr	r2, [pc, #220]	; (80009c8 <DMA_DeInit+0x170>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d103      	bne.n	80008f6 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <DMA_DeInit+0x158>)
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <DMA_DeInit+0x174>)
 80008f2:	60da      	str	r2, [r3, #12]
}
 80008f4:	e053      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a35      	ldr	r2, [pc, #212]	; (80009d0 <DMA_DeInit+0x178>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d103      	bne.n	8000906 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <DMA_DeInit+0x158>)
 8000900:	4a34      	ldr	r2, [pc, #208]	; (80009d4 <DMA_DeInit+0x17c>)
 8000902:	60da      	str	r2, [r3, #12]
}
 8000904:	e04b      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a33      	ldr	r2, [pc, #204]	; (80009d8 <DMA_DeInit+0x180>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d104      	bne.n	8000918 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <DMA_DeInit+0x158>)
 8000910:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000914:	60da      	str	r2, [r3, #12]
}
 8000916:	e042      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a30      	ldr	r2, [pc, #192]	; (80009dc <DMA_DeInit+0x184>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d103      	bne.n	8000928 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <DMA_DeInit+0x188>)
 8000922:	223d      	movs	r2, #61	; 0x3d
 8000924:	609a      	str	r2, [r3, #8]
}
 8000926:	e03a      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <DMA_DeInit+0x18c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d104      	bne.n	800093a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <DMA_DeInit+0x188>)
 8000932:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000936:	609a      	str	r2, [r3, #8]
}
 8000938:	e031      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <DMA_DeInit+0x190>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d104      	bne.n	800094c <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <DMA_DeInit+0x188>)
 8000944:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000948:	609a      	str	r2, [r3, #8]
}
 800094a:	e028      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a27      	ldr	r2, [pc, #156]	; (80009ec <DMA_DeInit+0x194>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d104      	bne.n	800095e <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <DMA_DeInit+0x188>)
 8000956:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800095a:	609a      	str	r2, [r3, #8]
}
 800095c:	e01f      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <DMA_DeInit+0x198>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d103      	bne.n	800096e <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <DMA_DeInit+0x188>)
 8000968:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <DMA_DeInit+0x16c>)
 800096a:	60da      	str	r2, [r3, #12]
}
 800096c:	e017      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <DMA_DeInit+0x19c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d103      	bne.n	800097e <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <DMA_DeInit+0x188>)
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <DMA_DeInit+0x174>)
 800097a:	60da      	str	r2, [r3, #12]
}
 800097c:	e00f      	b.n	800099e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <DMA_DeInit+0x1a0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d103      	bne.n	800098e <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <DMA_DeInit+0x188>)
 8000988:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <DMA_DeInit+0x17c>)
 800098a:	60da      	str	r2, [r3, #12]
}
 800098c:	e007      	b.n	800099e <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <DMA_DeInit+0x1a4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d103      	bne.n	800099e <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <DMA_DeInit+0x188>)
 8000998:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800099c:	60da      	str	r2, [r3, #12]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40026010 	.word	0x40026010
 80009b0:	40026000 	.word	0x40026000
 80009b4:	40026028 	.word	0x40026028
 80009b8:	40026040 	.word	0x40026040
 80009bc:	40026058 	.word	0x40026058
 80009c0:	40026070 	.word	0x40026070
 80009c4:	2000003d 	.word	0x2000003d
 80009c8:	40026088 	.word	0x40026088
 80009cc:	20000f40 	.word	0x20000f40
 80009d0:	400260a0 	.word	0x400260a0
 80009d4:	203d0000 	.word	0x203d0000
 80009d8:	400260b8 	.word	0x400260b8
 80009dc:	40026410 	.word	0x40026410
 80009e0:	40026400 	.word	0x40026400
 80009e4:	40026428 	.word	0x40026428
 80009e8:	40026440 	.word	0x40026440
 80009ec:	40026458 	.word	0x40026458
 80009f0:	40026470 	.word	0x40026470
 80009f4:	40026488 	.word	0x40026488
 80009f8:	400264a0 	.word	0x400264a0
 80009fc:	400264b8 	.word	0x400264b8

08000a00 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <DMA_Init+0xac>)
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a2a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a36:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a4e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a54:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f023 0307 	bic.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	691a      	ldr	r2, [r3, #16]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60da      	str	r2, [r3, #12]
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	f01c803f 	.word	0xf01c803f

08000ab0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f043 0201 	orr.w	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000ace:	e005      	b.n	8000adc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 0201 	bic.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	4613      	mov	r3, r2
 8000af4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00f      	beq.n	8000b20 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	e005      	b.n	8000b20 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	2b80      	cmp	r3, #128	; 0x80
 8000b24:	d014      	beq.n	8000b50 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	f003 031e 	and.w	r3, r3, #30
 8000b36:	431a      	orrs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000b3c:	e008      	b.n	8000b50 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	f003 031e 	and.w	r3, r3, #30
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <DMA_GetITStatus+0xa4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d802      	bhi.n	8000b80 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <DMA_GetITStatus+0xa8>)
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	e001      	b.n	8000b84 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <DMA_GetITStatus+0xac>)
 8000b82:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000b8a:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00a      	beq.n	8000ba8 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	0adb      	lsrs	r3, r3, #11
 8000b96:	f003 031e 	and.w	r3, r3, #30
 8000b9a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	e004      	b.n	8000bb2 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb0:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	e002      	b.n	8000bca <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000bd0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d005      	beq.n	8000bec <DMA_GetITStatus+0x90>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
 8000bea:	e001      	b.n	8000bf0 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	4002640f 	.word	0x4002640f
 8000c04:	40026000 	.word	0x40026000
 8000c08:	40026400 	.word	0x40026400

08000c0c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <DMA_ClearITPendingBit+0x50>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d802      	bhi.n	8000c24 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <DMA_ClearITPendingBit+0x54>)
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	e001      	b.n	8000c28 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <DMA_ClearITPendingBit+0x58>)
 8000c26:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c38:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000c40:	e006      	b.n	8000c50 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c48:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	6093      	str	r3, [r2, #8]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	4002640f 	.word	0x4002640f
 8000c60:	40026000 	.word	0x40026000
 8000c64:	40026400 	.word	0x40026400

08000c68 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e076      	b.n	8000d72 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c84:	2201      	movs	r2, #1
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d165      	bne.n	8000d6c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2103      	movs	r1, #3
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d003      	beq.n	8000cde <GPIO_Init+0x76>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	791b      	ldrb	r3, [r3, #4]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d12e      	bne.n	8000d3c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	2301      	movs	r3, #1
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	7992      	ldrb	r2, [r2, #6]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	b292      	uxth	r2, r2
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2103      	movs	r1, #3
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	79db      	ldrb	r3, [r3, #7]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d985      	bls.n	8000c84 <GPIO_Init+0x1c>
    }
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	71da      	strb	r2, [r3, #7]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	807b      	strh	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000dd2:	787a      	ldrb	r2, [r7, #1]
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	8879      	ldrh	r1, [r7, #2]
 8000e04:	08c9      	lsrs	r1, r1, #3
 8000e06:	b289      	uxth	r1, r1
 8000e08:	4608      	mov	r0, r1
 8000e0a:	ea02 0103 	and.w	r1, r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f100 0208 	add.w	r2, r0, #8
 8000e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	08db      	lsrs	r3, r3, #3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <I2C_DeInit+0x68>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d10a      	bne.n	8000e72 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000e62:	f000 fb61 	bl	8001528 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000e66:	2100      	movs	r1, #0
 8000e68:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000e6c:	f000 fb5c 	bl	8001528 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000e70:	e01c      	b.n	8000eac <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <I2C_DeInit+0x6c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10a      	bne.n	8000e90 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e80:	f000 fb52 	bl	8001528 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000e84:	2100      	movs	r1, #0
 8000e86:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e8a:	f000 fb4d 	bl	8001528 <RCC_APB1PeriphResetCmd>
}
 8000e8e:	e00d      	b.n	8000eac <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <I2C_DeInit+0x70>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d109      	bne.n	8000eac <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000e9e:	f000 fb43 	bl	8001528 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ea8:	f000 fb3e 	bl	8001528 <RCC_APB1PeriphResetCmd>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	40005800 	.word	0x40005800
 8000ebc:	40005c00 	.word	0x40005c00

08000ec0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ece:	2300      	movs	r3, #0
 8000ed0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000ed6:	4b57      	ldr	r3, [pc, #348]	; (8001034 <I2C_Init+0x174>)
 8000ed8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	889b      	ldrh	r3, [r3, #4]
 8000ede:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000ee0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ee2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fa0d 	bl	800130c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	4a4f      	ldr	r2, [pc, #316]	; (8001038 <I2C_Init+0x178>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0c9b      	lsrs	r3, r3, #18
 8000f00:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000f02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f06:	4313      	orrs	r3, r2
 8000f08:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f0e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a44      	ldr	r2, [pc, #272]	; (800103c <I2C_Init+0x17c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d815      	bhi.n	8000f5a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d801      	bhi.n	8000f46 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000f42:	2304      	movs	r3, #4
 8000f44:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000f46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000f4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f50:	3301      	adds	r3, #1
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	841a      	strh	r2, [r3, #32]
 8000f58:	e040      	b.n	8000fdc <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	88db      	ldrh	r3, [r3, #6]
 8000f5e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d109      	bne.n	8000f7a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f78:	e00e      	b.n	8000f98 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009a      	lsls	r2, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000faa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fba:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <I2C_Init+0x180>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1192      	asrs	r2, r2, #6
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fe0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000ff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ffa:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000ffe:	f023 0302 	bic.w	r3, r3, #2
 8001002:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	889a      	ldrh	r2, [r3, #4]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	895b      	ldrh	r3, [r3, #10]
 800100c:	4313      	orrs	r3, r2
 800100e:	b29a      	uxth	r2, r3
 8001010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001012:	4313      	orrs	r3, r2
 8001014:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800101a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	899a      	ldrh	r2, [r3, #12]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	891b      	ldrh	r3, [r3, #8]
 8001024:	4313      	orrs	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	811a      	strh	r2, [r3, #8]
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	007a1200 	.word	0x007a1200
 8001038:	431bde83 	.word	0x431bde83
 800103c:	000186a0 	.word	0x000186a0
 8001040:	10624dd3 	.word	0x10624dd3

08001044 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001052:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001060:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001074:	819a      	strh	r2, [r3, #12]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80010a4:	e007      	b.n	80010b6 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	801a      	strh	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80010e4:	e007      	b.n	80010f6 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	801a      	strh	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	b29a      	uxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001124:	e007      	b.n	8001136 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	801a      	strh	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	70fb      	strb	r3, [r7, #3]
 800114e:	4613      	mov	r3, r2
 8001150:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001152:	78bb      	ldrb	r3, [r7, #2]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	70fb      	strb	r3, [r7, #3]
 8001160:	e003      	b.n	800116a <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	821a      	strh	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	b29a      	uxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	821a      	strh	r2, [r3, #16]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80011ae:	787b      	ldrb	r3, [r7, #1]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	4313      	orrs	r3, r2
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 80011c4:	e009      	b.n	80011da <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4013      	ands	r3, r2
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	809a      	strh	r2, [r3, #4]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80011fc:	2300      	movs	r3, #0
 80011fe:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	8a9b      	ldrh	r3, [r3, #20]
 8001204:	b29b      	uxth	r3, r3
 8001206:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	8b1b      	ldrh	r3, [r3, #24]
 800120c:	b29b      	uxth	r3, r3
 800120e:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	041b      	lsls	r3, r3, #16
 8001214:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
 800121c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001220:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	4013      	ands	r3, r2
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d102      	bne.n	8001234 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e001      	b.n	8001238 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001238:	7dfb      	ldrb	r3, [r7, #23]
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001246:	b480      	push	{r7}
 8001248:	b087      	sub	sp, #28
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	0f1b      	lsrs	r3, r3, #28
 8001264:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800126c:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3314      	adds	r3, #20
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e005      	b.n	8001288 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3318      	adds	r3, #24
 8001286:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001294:	2301      	movs	r3, #1
 8001296:	75fb      	strb	r3, [r7, #23]
 8001298:	e001      	b.n	800129e <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800129e:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <RCC_ClockSecuritySystemCmd+0x1c>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	4247004c 	.word	0x4247004c

080012cc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <RCC_MCO1Config+0x3c>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <RCC_MCO1Config+0x3c>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6093      	str	r3, [r2, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b08      	cmp	r3, #8
 800133a:	d011      	beq.n	8001360 <RCC_GetClocksFreq+0x54>
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d844      	bhi.n	80013cc <RCC_GetClocksFreq+0xc0>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <RCC_GetClocksFreq+0x44>
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b04      	cmp	r3, #4
 800134c:	d004      	beq.n	8001358 <RCC_GetClocksFreq+0x4c>
 800134e:	e03d      	b.n	80013cc <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a42      	ldr	r2, [pc, #264]	; (800145c <RCC_GetClocksFreq+0x150>)
 8001354:	601a      	str	r2, [r3, #0]
    break;
 8001356:	e03d      	b.n	80013d4 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a41      	ldr	r2, [pc, #260]	; (8001460 <RCC_GetClocksFreq+0x154>)
 800135c:	601a      	str	r2, [r3, #0]
    break;
 800135e:	e039      	b.n	80013d4 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	0d9b      	lsrs	r3, r3, #22
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800136c:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001374:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00c      	beq.n	8001396 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800137c:	4a38      	ldr	r2, [pc, #224]	; (8001460 <RCC_GetClocksFreq+0x154>)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	4a34      	ldr	r2, [pc, #208]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 8001386:	6852      	ldr	r2, [r2, #4]
 8001388:	0992      	lsrs	r2, r2, #6
 800138a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e00b      	b.n	80013ae <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001396:	4a31      	ldr	r2, [pc, #196]	; (800145c <RCC_GetClocksFreq+0x150>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 80013a0:	6852      	ldr	r2, [r2, #4]
 80013a2:	0992      	lsrs	r2, r2, #6
 80013a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	0c1b      	lsrs	r3, r3, #16
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	3301      	adds	r3, #1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
    break;
 80013ca:	e003      	b.n	80013d4 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <RCC_GetClocksFreq+0x150>)
 80013d0:	601a      	str	r2, [r3, #0]
    break;
 80013d2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013dc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013e4:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <RCC_GetClocksFreq+0x158>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	40da      	lsrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001404:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	0a9b      	lsrs	r3, r3, #10
 800140a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800140c:	4a15      	ldr	r2, [pc, #84]	; (8001464 <RCC_GetClocksFreq+0x158>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	40da      	lsrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800142c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	0b5b      	lsrs	r3, r3, #13
 8001432:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <RCC_GetClocksFreq+0x158>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	40da      	lsrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
}
 800144c:	bf00      	nop
 800144e:	3724      	adds	r7, #36	; 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40023800 	.word	0x40023800
 800145c:	00f42400 	.word	0x00f42400
 8001460:	017d7840 	.word	0x017d7840
 8001464:	10000000 	.word	0x10000000

08001468 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800147c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800147e:	4909      	ldr	r1, [pc, #36]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001486:	e006      	b.n	8001496 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	43db      	mvns	r3, r3
 8001490:	4904      	ldr	r1, [pc, #16]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001492:	4013      	ands	r3, r2
 8001494:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80014bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014be:	4909      	ldr	r1, [pc, #36]	; (80014e4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 80014c6:	e006      	b.n	80014d6 <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4904      	ldr	r1, [pc, #16]	; (80014e4 <RCC_AHB2PeriphClockCmd+0x3c>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	634b      	str	r3, [r1, #52]	; 0x34
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <RCC_APB1PeriphClockCmd+0x3c>)
 80014fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fe:	4909      	ldr	r1, [pc, #36]	; (8001524 <RCC_APB1PeriphClockCmd+0x3c>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4313      	orrs	r3, r2
 8001504:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001506:	e006      	b.n	8001516 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <RCC_APB1PeriphClockCmd+0x3c>)
 800150a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	43db      	mvns	r3, r3
 8001510:	4904      	ldr	r1, [pc, #16]	; (8001524 <RCC_APB1PeriphClockCmd+0x3c>)
 8001512:	4013      	ands	r3, r2
 8001514:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	4909      	ldr	r1, [pc, #36]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001546:	e006      	b.n	8001556 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	43db      	mvns	r3, r3
 8001550:	4904      	ldr	r1, [pc, #16]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 8001552:	4013      	ands	r3, r2
 8001554:	620b      	str	r3, [r1, #32]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	8a1b      	ldrh	r3, [r3, #16]
 8001586:	b29b      	uxth	r3, r3
 8001588:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001590:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	88db      	ldrh	r3, [r3, #6]
 8001596:	461a      	mov	r2, r3
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	4313      	orrs	r3, r2
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	899b      	ldrh	r3, [r3, #12]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015b4:	f023 030c 	bic.w	r3, r3, #12
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	889a      	ldrh	r2, [r3, #4]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	891b      	ldrh	r3, [r3, #8]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	4313      	orrs	r3, r2
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	8a9b      	ldrh	r3, [r3, #20]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	899b      	ldrh	r3, [r3, #12]
 80015f2:	461a      	mov	r2, r3
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	4313      	orrs	r3, r2
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe80 	bl	800130c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <USART_Init+0x168>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d003      	beq.n	800161c <USART_Init+0xb4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <USART_Init+0x16c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	623b      	str	r3, [r7, #32]
 8001620:	e001      	b.n	8001626 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	899b      	ldrh	r3, [r3, #12]
 800162a:	b29b      	uxth	r3, r3
 800162c:	b21b      	sxth	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	da0c      	bge.n	800164c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001632:	6a3a      	ldr	r2, [r7, #32]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009a      	lsls	r2, r3, #2
 800163c:	441a      	add	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	e00b      	b.n	8001664 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800164c:	6a3a      	ldr	r2, [r7, #32]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009a      	lsls	r2, r3, #2
 8001656:	441a      	add	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <USART_Init+0x170>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	2264      	movs	r2, #100	; 0x64
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	899b      	ldrh	r3, [r3, #12]
 8001686:	b29b      	uxth	r3, r3
 8001688:	b21b      	sxth	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	da0c      	bge.n	80016a8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	3332      	adds	r3, #50	; 0x32
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <USART_Init+0x170>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a2:	4313      	orrs	r3, r2
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	e00b      	b.n	80016c0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	3332      	adds	r3, #50	; 0x32
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <USART_Init+0x170>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	095b      	lsrs	r3, r3, #5
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016bc:	4313      	orrs	r3, r2
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	811a      	strh	r2, [r3, #8]
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40011400 	.word	0x40011400
 80016d8:	51eb851f 	.word	0x51eb851f

080016dc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	899b      	ldrh	r3, [r3, #12]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80016fe:	e007      	b.n	8001710 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	899b      	ldrh	r3, [r3, #12]
 8001704:	b29b      	uxth	r3, r3
 8001706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	819a      	strh	r2, [r3, #12]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	809a      	strh	r2, [r3, #4]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	889b      	ldrh	r3, [r3, #4]
 800174c:	b29b      	uxth	r3, r3
 800174e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001752:	b29b      	uxth	r3, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2db      	uxtb	r3, r3
 800178c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001796:	2201      	movs	r2, #1
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d103      	bne.n	80017ae <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	330c      	adds	r3, #12
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e009      	b.n	80017c2 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d103      	bne.n	80017bc <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3310      	adds	r3, #16
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e002      	b.n	80017c2 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3314      	adds	r3, #20
 80017c0:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80017c2:	787b      	ldrb	r3, [r7, #1]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017d4:	e006      	b.n	80017e4 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	6819      	ldr	r1, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	43da      	mvns	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	400a      	ands	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b29a      	uxth	r2, r3
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	4013      	ands	r3, r2
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	43db      	mvns	r3, r3
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	801a      	strh	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <__io_putchar>:
        { 0, 0, 0 },
        { 1, 2, 1 }
    };

int __io_putchar(uint8_t ch) //Allow printf for register configuration log
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]

	uart2_write(ch);
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fb30 	bl	8001ebc <uart2_write>
	return ch;
 800185c:	79fb      	ldrb	r3, [r7, #7]

}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <main>:

int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0


		uart2_tx_init();	// Initiliaze UART to allow serial logs for error debug/frame transmission
 800186c:	f000 face 	bl	8001e0c <uart2_tx_init>
		led_init();			// Initialize Error LED
 8001870:	f000 f95a 	bl	8001b28 <led_init>
		MCO1_init();		// Initialize MCO1 clock supply at 16MHz
 8001874:	f000 f91c 	bl	8001ab0 <MCO1_init>
		I2C1_init();		// Initialise I2C communication at 100KHz
 8001878:	f000 f998 	bl	8001bac <I2C1_init>
		camInit();			// Configure all OV7670 registers
 800187c:	f000 fa8a 	bl	8001d94 <camInit>
		DCMI_Configure();	// Configure DCMI and DMA for transmission
 8001880:	f000 fb64 	bl	8001f4c <DCMI_Configure>
		CaptureFrame();		// Capture first frame
 8001884:	f000 fca4 	bl	80021d0 <CaptureFrame>


		while (1) 	{							//Repetitive loop to continously capture/process/transmit frame
				if (frame_flag == true)			// flag set if DMA transfer from DCMI to frame_buffer completed
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <main+0x90>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0fa      	beq.n	8001888 <main+0x20>
				{
					frame_flag = false;			// Reset frame ready flag
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <main+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
					YUVtoGREY_2D(frame_buffer, buffer_2D);
 8001898:	4918      	ldr	r1, [pc, #96]	; (80018fc <main+0x94>)
 800189a:	4819      	ldr	r0, [pc, #100]	; (8001900 <main+0x98>)
 800189c:	f000 fca8 	bl	80021f0 <YUVtoGREY_2D>

					if(CompHis == true)
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <main+0x9c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <main+0x4e>
					{
						Histogram(PixelCounter);
 80018a8:	4817      	ldr	r0, [pc, #92]	; (8001908 <main+0xa0>)
 80018aa:	f000 fcfb 	bl	80022a4 <Histogram>
						TransmitLine_2D_UP(buffer_2D);
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <main+0x94>)
 80018b0:	f000 fe32 	bl	8002518 <TransmitLine_2D_UP>
 80018b4:	e01d      	b.n	80018f2 <main+0x8a>
					}

					else if(SobelEdge == true)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <main+0xa4>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <main+0x84>
					{

						//ApplyFilter3x3(buffer_2D, GaussianB, boxblur_kernel,9);
						GPIOD->ODR ^=LED_PIN;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <main+0xa8>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <main+0xa8>)
 80018c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018c8:	6153      	str	r3, [r2, #20]
						SobelEdgeDetection(buffer_2D, SobelM);
 80018ca:	4912      	ldr	r1, [pc, #72]	; (8001914 <main+0xac>)
 80018cc:	480b      	ldr	r0, [pc, #44]	; (80018fc <main+0x94>)
 80018ce:	f000 fec7 	bl	8002660 <SobelEdgeDetection>
						GPIOD->ODR ^=LED_PIN;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <main+0xa8>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <main+0xa8>)
 80018d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018dc:	6153      	str	r3, [r2, #20]
						Histogram(EdgePixelCounter);
 80018de:	480e      	ldr	r0, [pc, #56]	; (8001918 <main+0xb0>)
 80018e0:	f000 fce0 	bl	80022a4 <Histogram>
						TransmitLine_2D_UP(SobelM);
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <main+0xac>)
 80018e6:	f000 fe17 	bl	8002518 <TransmitLine_2D_UP>
 80018ea:	e002      	b.n	80018f2 <main+0x8a>

					}

					else
					{
						TransmitLine_2D_UP(buffer_2D);
 80018ec:	4803      	ldr	r0, [pc, #12]	; (80018fc <main+0x94>)
 80018ee:	f000 fe13 	bl	8002518 <TransmitLine_2D_UP>
					//ApplyFilter3x3_PP(GaussianB, SobelY, sobel_y_kernel,0);
					//TransmitLine_2D(SobelY);
					//memset(buffer_2D, 0, sizeof(buffer_2D));
					//memset(SobelY, 0, sizeof(SobelY));

					CaptureFrame();
 80018f2:	f000 fc6d 	bl	80021d0 <CaptureFrame>
				if (frame_flag == true)			// flag set if DMA transfer from DCMI to frame_buffer completed
 80018f6:	e7c7      	b.n	8001888 <main+0x20>
 80018f8:	2000001c 	.word	0x2000001c
 80018fc:	2000b824 	.word	0x2000b824
 8001900:	20000024 	.word	0x20000024
 8001904:	2000001f 	.word	0x2000001f
 8001908:	2000b424 	.word	0x2000b424
 800190c:	20000020 	.word	0x20000020
 8001910:	40020c00 	.word	0x40020c00
 8001914:	20011224 	.word	0x20011224
 8001918:	2000b624 	.word	0x2000b624

0800191c <DMA2_Stream1_IRQHandler>:



////////////////////////////////////////////////Interrupt Handlers///////////////////////////////////////////////////////////////
void DMA2_Stream1_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	// DMA complete
	if (DMA_GetITStatus(DMA2_Stream1, DMA_IT_TCIF1) != RESET) { // Transfer complete
 8001920:	490d      	ldr	r1, [pc, #52]	; (8001958 <DMA2_Stream1_IRQHandler+0x3c>)
 8001922:	480e      	ldr	r0, [pc, #56]	; (800195c <DMA2_Stream1_IRQHandler+0x40>)
 8001924:	f7ff f91a 	bl	8000b5c <DMA_GetITStatus>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <DMA2_Stream1_IRQHandler+0x22>
		DMA_ClearITPendingBit(DMA2_Stream1, DMA_IT_TCIF1);
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <DMA2_Stream1_IRQHandler+0x3c>)
 8001930:	480a      	ldr	r0, [pc, #40]	; (800195c <DMA2_Stream1_IRQHandler+0x40>)
 8001932:	f7ff f96b 	bl	8000c0c <DMA_ClearITPendingBit>
		frame_flag = true;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <DMA2_Stream1_IRQHandler+0x44>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
	} else if (DMA_GetITStatus(DMA2_Stream1, DMA_IT_TEIF1) != RESET) { // Transfer error
		// Not used, just for debug
		DMA_ClearITPendingBit(DMA2_Stream1, DMA_IT_TEIF1);
	}
}
 800193c:	e00a      	b.n	8001954 <DMA2_Stream1_IRQHandler+0x38>
	} else if (DMA_GetITStatus(DMA2_Stream1, DMA_IT_TEIF1) != RESET) { // Transfer error
 800193e:	4909      	ldr	r1, [pc, #36]	; (8001964 <DMA2_Stream1_IRQHandler+0x48>)
 8001940:	4806      	ldr	r0, [pc, #24]	; (800195c <DMA2_Stream1_IRQHandler+0x40>)
 8001942:	f7ff f90b 	bl	8000b5c <DMA_GetITStatus>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <DMA2_Stream1_IRQHandler+0x38>
		DMA_ClearITPendingBit(DMA2_Stream1, DMA_IT_TEIF1);
 800194c:	4905      	ldr	r1, [pc, #20]	; (8001964 <DMA2_Stream1_IRQHandler+0x48>)
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <DMA2_Stream1_IRQHandler+0x40>)
 8001950:	f7ff f95c 	bl	8000c0c <DMA_ClearITPendingBit>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	10008800 	.word	0x10008800
 800195c:	40026428 	.word	0x40026428
 8001960:	2000001c 	.word	0x2000001c
 8001964:	10002200 	.word	0x10002200

08001968 <DCMI_IRQHandler>:

void DCMI_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	if (DCMI_GetFlagStatus(DCMI_FLAG_FRAMERI) == SET) { // Frame received
 800196c:	2001      	movs	r0, #1
 800196e:	f7fe ff31 	bl	80007d4 <DCMI_GetFlagStatus>
 8001972:	4603      	mov	r3, r0
 8001974:	2b01      	cmp	r3, #1
 8001976:	d10c      	bne.n	8001992 <DCMI_IRQHandler+0x2a>
		DCMI_ClearFlag(DCMI_FLAG_FRAMERI);
 8001978:	2001      	movs	r0, #1
 800197a:	f7fe ff5d 	bl	8000838 <DCMI_ClearFlag>
		// After receiving a full frame we disable capture and the DMA transfer. This is probably a very inefficient way of capturing and sending frames
		// but it's the only way I've gotten to reliably work.
		DMA_Cmd(DMA2_Stream1, DISABLE);
 800197e:	2100      	movs	r1, #0
 8001980:	480e      	ldr	r0, [pc, #56]	; (80019bc <DCMI_IRQHandler+0x54>)
 8001982:	f7ff f895 	bl	8000ab0 <DMA_Cmd>
		DCMI_Cmd(DISABLE);
 8001986:	2000      	movs	r0, #0
 8001988:	f7fe fec4 	bl	8000714 <DCMI_Cmd>
		DCMI_CaptureCmd(DISABLE);
 800198c:	2000      	movs	r0, #0
 800198e:	f7fe fedf 	bl	8000750 <DCMI_CaptureCmd>
	}
	if (DCMI_GetFlagStatus(DCMI_FLAG_OVFRI) == SET) { // Overflow
 8001992:	2002      	movs	r0, #2
 8001994:	f7fe ff1e 	bl	80007d4 <DCMI_GetFlagStatus>
 8001998:	4603      	mov	r3, r0
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <DCMI_IRQHandler+0x3c>
		// Not used, just for debug
		DCMI_ClearFlag(DCMI_FLAG_OVFRI);
 800199e:	2002      	movs	r0, #2
 80019a0:	f7fe ff4a 	bl	8000838 <DCMI_ClearFlag>
	}
	if (DCMI_GetFlagStatus(DCMI_FLAG_ERRRI) == SET) { // Error
 80019a4:	2004      	movs	r0, #4
 80019a6:	f7fe ff15 	bl	80007d4 <DCMI_GetFlagStatus>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <DCMI_IRQHandler+0x4e>
		// Not used, just for debug
		DCMI_ClearFlag(DCMI_FLAG_ERRRI);
 80019b0:	2004      	movs	r0, #4
 80019b2:	f7fe ff41 	bl	8000838 <DCMI_ClearFlag>
	}
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40026428 	.word	0x40026428

080019c0 <USART2_IRQHandler>:



void USART2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

	if (Serial_read() == 'L')
 80019c4:	f000 fa94 	bl	8001ef0 <Serial_read>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b4c      	cmp	r3, #76	; 0x4c
 80019cc:	d102      	bne.n	80019d4 <USART2_IRQHandler+0x14>
		{
			sendLine_flag = true;
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <USART2_IRQHandler+0xd8>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
		}


	if (Serial_read() == 'E')
 80019d4:	f000 fa8c 	bl	8001ef0 <Serial_read>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b45      	cmp	r3, #69	; 0x45
 80019dc:	d114      	bne.n	8001a08 <USART2_IRQHandler+0x48>
		{

			CompHis = false;
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <USART2_IRQHandler+0xdc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
			BrightSpotD = false;
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <USART2_IRQHandler+0xe0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
			SobelEdge = !SobelEdge;
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <USART2_IRQHandler+0xe4>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bf14      	ite	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	2300      	moveq	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <USART2_IRQHandler+0xe4>)
 8001a06:	701a      	strb	r2, [r3, #0]


		}

	if (Serial_read() == 'T')
 8001a08:	f000 fa72 	bl	8001ef0 <Serial_read>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b54      	cmp	r3, #84	; 0x54
 8001a10:	d10e      	bne.n	8001a30 <USART2_IRQHandler+0x70>
			{

				SobelT = !SobelT;
 8001a12:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <USART2_IRQHandler+0xe8>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <USART2_IRQHandler+0xe8>)
 8001a2e:	701a      	strb	r2, [r3, #0]


			}

	if (Serial_read() == 'D')
 8001a30:	f000 fa5e 	bl	8001ef0 <Serial_read>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b44      	cmp	r3, #68	; 0x44
 8001a38:	d111      	bne.n	8001a5e <USART2_IRQHandler+0x9e>
		{

		  BrightSpotD = !BrightSpotD;	//Enable dynamic BSD
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <USART2_IRQHandler+0xe0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f083 0301 	eor.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <USART2_IRQHandler+0xe0>)
 8001a56:	701a      	strb	r2, [r3, #0]
		  SobelEdge = false;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <USART2_IRQHandler+0xe4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]

		}

	if (Serial_read() == 'H')
 8001a5e:	f000 fa47 	bl	8001ef0 <Serial_read>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b48      	cmp	r3, #72	; 0x48
 8001a66:	d111      	bne.n	8001a8c <USART2_IRQHandler+0xcc>
		{
			CompHis = !CompHis;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <USART2_IRQHandler+0xdc>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f083 0301 	eor.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <USART2_IRQHandler+0xdc>)
 8001a84:	701a      	strb	r2, [r3, #0]
			SobelEdge = false;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <USART2_IRQHandler+0xe4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
		}


	USART_ClearFlag(USART2, USART_FLAG_RXNE);
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <USART2_IRQHandler+0xec>)
 8001a90:	f7ff feca 	bl	8001828 <USART_ClearFlag>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000001d 	.word	0x2000001d
 8001a9c:	2000001f 	.word	0x2000001f
 8001aa0:	2000001e 	.word	0x2000001e
 8001aa4:	20000020 	.word	0x20000020
 8001aa8:	20000021 	.word	0x20000021
 8001aac:	40004400 	.word	0x40004400

08001ab0 <MCO1_init>:

////////////////////////////////////////////////MCO1 Functions///////////////////////////////////////////////////////////////

void MCO1_init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

		GPIO_InitTypeDef GPIO_InitStructure;

		RCC_ClockSecuritySystemCmd(ENABLE);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff fbf8 	bl	80012ac <RCC_ClockSecuritySystemCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);	//Enable AHB1 Clock
 8001abc:	2101      	movs	r1, #1
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff fcd2 	bl	8001468 <RCC_AHB1PeriphClockCmd>

		//Configure PA8 to output clock
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;				//PA8 - XCLK
 8001ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac8:	603b      	str	r3, [r7, #0]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001aca:	2303      	movs	r3, #3
 8001acc:	717b      	strb	r3, [r7, #5]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	713b      	strb	r3, [r7, #4]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71bb      	strb	r3, [r7, #6]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	71fb      	strb	r3, [r7, #7]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ada:	463b      	mov	r3, r7
 8001adc:	4619      	mov	r1, r3
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <MCO1_init+0x50>)
 8001ae0:	f7ff f8c2 	bl	8000c68 <GPIO_Init>


		GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_MCO);	//Configure PA8 AF
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MCO1_init+0x50>)
 8001aea:	f7ff f966 	bl	8000dba <GPIO_PinAFConfig>

		//Define MCO1 clock source
		RCC_MCO1Config(RCC_MCO1Source_HSI, RCC_MCO1Div_1);	// Use HSI clock at 16 MHz
 8001aee:	2100      	movs	r1, #0
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fbeb 	bl	80012cc <RCC_MCO1Config>


}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40020000 	.word	0x40020000

08001b04 <Delay>:

////////////////////////////////////////////////LED Functions///////////////////////////////////////////////////////////////
void Delay(volatile long nCount)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

	while (nCount--) {}
 8001b0c:	bf00      	nop
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	1e5a      	subs	r2, r3, #1
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1fa      	bne.n	8001b0e <Delay+0xa>

}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <led_init>:

void led_init(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

	//Enable clock access to GPIOD
	RCC->AHB1ENR |= GPIODEN;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <led_init+0x34>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <led_init+0x34>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PD12 as output pin
	GPIOD->MODER |= (1U<<24);
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <led_init+0x38>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <led_init+0x38>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <led_init+0x38>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <led_init+0x38>)
 8001b4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020c00 	.word	0x40020c00

08001b64 <err_led>:

void err_led(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0

	GPIOD->ODR ^=LED_PIN;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <err_led+0x40>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <err_led+0x40>)
 8001b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b74:	6153      	str	r3, [r2, #20]
	for (int i =0;i<100000;i++){}
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	e002      	b.n	8001b82 <err_led+0x1e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <err_led+0x44>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	ddf8      	ble.n	8001b7c <err_led+0x18>
	GPIOD->ODR ^=LED_PIN;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <err_led+0x40>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <err_led+0x40>)
 8001b90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b94:	6153      	str	r3, [r2, #20]


}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	0001869f 	.word	0x0001869f

08001bac <I2C1_init>:
	GPIOD->ODR ^=TEST_PIN;

}

////////////////////////////////////////////////I2C Functions///////////////////////////////////////////////////////////////
void I2C1_init(void){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure; // this is for the GPIO pins used as I2C1SDA and I2C1SCL
	 I2C_InitTypeDef I2C_InitStructure; // this is for the I2C1 initilization

	 /* enable APB1 peripheral clock for I2C1*/
	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001bb8:	f7ff fc96 	bl	80014e8 <RCC_APB1PeriphClockCmd>

	 /* enable the peripheral clock for the pins used by
	  PB6 for I2C SCL and PB9 for I2C1_SDL*/
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7ff fc52 	bl	8001468 <RCC_AHB1PeriphClockCmd>

	 /* This sequence sets up the I2C1SDA and I2C1SCL pins
	  * so they work correctly with the I2C1 peripheral
	  */
	 GPIO_StructInit(&GPIO_InitStructure);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f8dc 	bl	8000d86 <GPIO_StructInit>
	 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9; // Pins 8(I2C1_SCL) and 9(I2C1_SDA)
 8001bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd2:	613b      	str	r3, [r7, #16]
	 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; // the pins are configured as alternate function so the USART peripheral has access to them
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	753b      	strb	r3, [r7, #20]
	 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;// this defines the IO speed and has nothing to do with the baudrate!
 8001bd8:	2300      	movs	r3, #0
 8001bda:	757b      	strb	r3, [r7, #21]
	 GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;// this defines the output type as open drain
 8001bdc:	2301      	movs	r3, #1
 8001bde:	75bb      	strb	r3, [r7, #22]
	 GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;// this activates the pullup resistors on the IO pins
 8001be0:	2301      	movs	r3, #1
 8001be2:	75fb      	strb	r3, [r7, #23]
	 GPIO_Init(GPIOB, &GPIO_InitStructure);// now all the values are passed to the GPIO_Init()
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4619      	mov	r1, r3
 8001bea:	481d      	ldr	r0, [pc, #116]	; (8001c60 <I2C1_init+0xb4>)
 8001bec:	f7ff f83c 	bl	8000c68 <GPIO_Init>

	 /* The I2C1_SCL and I2C1_SDA pins are now connected to their AF
	  * so that the I2C1 can take over control of the
	  * pins
	  */
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1); //
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	481a      	ldr	r0, [pc, #104]	; (8001c60 <I2C1_init+0xb4>)
 8001bf6:	f7ff f8e0 	bl	8000dba <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	2109      	movs	r1, #9
 8001bfe:	4818      	ldr	r0, [pc, #96]	; (8001c60 <I2C1_init+0xb4>)
 8001c00:	f7ff f8db 	bl	8000dba <GPIO_PinAFConfig>

	  /* Configure I2C1 */
	  I2C_StructInit(&I2C_InitStructure);
 8001c04:	463b      	mov	r3, r7
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fa1c 	bl	8001044 <I2C_StructInit>
	  I2C_DeInit(I2C1);
 8001c0c:	4815      	ldr	r0, [pc, #84]	; (8001c64 <I2C1_init+0xb8>)
 8001c0e:	f7ff f91d 	bl	8000e4c <I2C_DeInit>

	  /* Enable the I2C peripheral */
	  I2C_Cmd(I2C1, ENABLE);
 8001c12:	2101      	movs	r1, #1
 8001c14:	4813      	ldr	r0, [pc, #76]	; (8001c64 <I2C1_init+0xb8>)
 8001c16:	f7ff fa34 	bl	8001082 <I2C_Cmd>

	  /* Set the I2C structure parameters */
	  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	80bb      	strh	r3, [r7, #4]
	  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8001c1e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001c22:	80fb      	strh	r3, [r7, #6]
	  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001c24:	2300      	movs	r3, #0
 8001c26:	813b      	strh	r3, [r7, #8]
	  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2c:	817b      	strh	r3, [r7, #10]
	  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c32:	81bb      	strh	r3, [r7, #12]
	  I2C_InitStructure.I2C_ClockSpeed = 100000;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <I2C1_init+0xbc>)
 8001c36:	603b      	str	r3, [r7, #0]
	  /* I2C Peripheral Enable */
	  I2C_ITConfig(I2C1, I2C_IT_ERR, ENABLE);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c3e:	4809      	ldr	r0, [pc, #36]	; (8001c64 <I2C1_init+0xb8>)
 8001c40:	f7ff faad 	bl	800119e <I2C_ITConfig>
	  /* Initialize the I2C peripheral w/ selected parameters */
	  I2C_Init(I2C1,&I2C_InitStructure);
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4806      	ldr	r0, [pc, #24]	; (8001c64 <I2C1_init+0xb8>)
 8001c4a:	f7ff f939 	bl	8000ec0 <I2C_Init>
	  I2C_Cmd(I2C1, ENABLE);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <I2C1_init+0xb8>)
 8001c52:	f7ff fa16 	bl	8001082 <I2C_Cmd>

}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40020400 	.word	0x40020400
 8001c64:	40005400 	.word	0x40005400
 8001c68:	000186a0 	.word	0x000186a0

08001c6c <I2C1_write>:

bool I2C1_write(uint8_t reg_addr, uint8_t* data)
	{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]

	uint32_t timeout = 0x7FFFFF;
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <I2C1_write+0x100>)
 8001c7a:	60fb      	str	r3, [r7, #12]

		while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)) {
 8001c7c:	e009      	b.n	8001c92 <I2C1_write+0x26>
			if ((timeout--) == 0) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	60fa      	str	r2, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d104      	bne.n	8001c92 <I2C1_write+0x26>
				Serial_log("Busy Timeout\r\n");
 8001c88:	4839      	ldr	r0, [pc, #228]	; (8001d70 <I2C1_write+0x104>)
 8001c8a:	f000 f93d 	bl	8001f08 <Serial_log>
				return true;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e068      	b.n	8001d64 <I2C1_write+0xf8>
		while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)) {
 8001c92:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001c96:	4837      	ldr	r0, [pc, #220]	; (8001d74 <I2C1_write+0x108>)
 8001c98:	f7ff fad5 	bl	8001246 <I2C_GetFlagStatus>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ed      	bne.n	8001c7e <I2C1_write+0x12>
			}
		}

		// Send start bit
		I2C_GenerateSTART(I2C1, ENABLE);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4833      	ldr	r0, [pc, #204]	; (8001d74 <I2C1_write+0x108>)
 8001ca6:	f7ff fa0c 	bl	80010c2 <I2C_GenerateSTART>

		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)) {
 8001caa:	e009      	b.n	8001cc0 <I2C1_write+0x54>
			if ((timeout--) == 0) {
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	60fa      	str	r2, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <I2C1_write+0x54>
				Serial_log("Start bit Timeout\r\n");
 8001cb6:	4830      	ldr	r0, [pc, #192]	; (8001d78 <I2C1_write+0x10c>)
 8001cb8:	f000 f926 	bl	8001f08 <Serial_log>
				return true;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e051      	b.n	8001d64 <I2C1_write+0xf8>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)) {
 8001cc0:	492e      	ldr	r1, [pc, #184]	; (8001d7c <I2C1_write+0x110>)
 8001cc2:	482c      	ldr	r0, [pc, #176]	; (8001d74 <I2C1_write+0x108>)
 8001cc4:	f7ff fa8f 	bl	80011e6 <I2C_CheckEvent>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0ee      	beq.n	8001cac <I2C1_write+0x40>
			}
		}

		// Send slave address (camera write address)
		I2C_Send7bitAddress(I2C1, OV7670_WRITE_ADDR, I2C_Direction_Transmitter);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2142      	movs	r1, #66	; 0x42
 8001cd2:	4828      	ldr	r0, [pc, #160]	; (8001d74 <I2C1_write+0x108>)
 8001cd4:	f7ff fa35 	bl	8001142 <I2C_Send7bitAddress>

		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) {
 8001cd8:	e009      	b.n	8001cee <I2C1_write+0x82>
			if ((timeout--) == 0) {
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	60fa      	str	r2, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <I2C1_write+0x82>
				Serial_log("Slave address timeout\r\n");
 8001ce4:	4826      	ldr	r0, [pc, #152]	; (8001d80 <I2C1_write+0x114>)
 8001ce6:	f000 f90f 	bl	8001f08 <Serial_log>
				return true;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e03a      	b.n	8001d64 <I2C1_write+0xf8>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) {
 8001cee:	4925      	ldr	r1, [pc, #148]	; (8001d84 <I2C1_write+0x118>)
 8001cf0:	4820      	ldr	r0, [pc, #128]	; (8001d74 <I2C1_write+0x108>)
 8001cf2:	f7ff fa78 	bl	80011e6 <I2C_CheckEvent>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ee      	beq.n	8001cda <I2C1_write+0x6e>
			}
		}

		// Send register address
		I2C_SendData(I2C1, reg_addr);
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	481c      	ldr	r0, [pc, #112]	; (8001d74 <I2C1_write+0x108>)
 8001d02:	f7ff fa3c 	bl	800117e <I2C_SendData>

		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 8001d06:	e009      	b.n	8001d1c <I2C1_write+0xb0>
			if ((timeout--) == 0) {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	60fa      	str	r2, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d104      	bne.n	8001d1c <I2C1_write+0xb0>
				Serial_log("Register timeout\r\n");
 8001d12:	481d      	ldr	r0, [pc, #116]	; (8001d88 <I2C1_write+0x11c>)
 8001d14:	f000 f8f8 	bl	8001f08 <Serial_log>
				return true;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e023      	b.n	8001d64 <I2C1_write+0xf8>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 8001d1c:	491b      	ldr	r1, [pc, #108]	; (8001d8c <I2C1_write+0x120>)
 8001d1e:	4815      	ldr	r0, [pc, #84]	; (8001d74 <I2C1_write+0x108>)
 8001d20:	f7ff fa61 	bl	80011e6 <I2C_CheckEvent>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0ee      	beq.n	8001d08 <I2C1_write+0x9c>
			}
		}

		// Send new register value
		I2C_SendData(I2C1, *data);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4810      	ldr	r0, [pc, #64]	; (8001d74 <I2C1_write+0x108>)
 8001d32:	f7ff fa24 	bl	800117e <I2C_SendData>

		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 8001d36:	e009      	b.n	8001d4c <I2C1_write+0xe0>
			if ((timeout--) == 0) {
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	60fa      	str	r2, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <I2C1_write+0xe0>
				Serial_log("Value timeout\r\n");
 8001d42:	4813      	ldr	r0, [pc, #76]	; (8001d90 <I2C1_write+0x124>)
 8001d44:	f000 f8e0 	bl	8001f08 <Serial_log>
				return true;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00b      	b.n	8001d64 <I2C1_write+0xf8>
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)) {
 8001d4c:	490f      	ldr	r1, [pc, #60]	; (8001d8c <I2C1_write+0x120>)
 8001d4e:	4809      	ldr	r0, [pc, #36]	; (8001d74 <I2C1_write+0x108>)
 8001d50:	f7ff fa49 	bl	80011e6 <I2C_CheckEvent>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ee      	beq.n	8001d38 <I2C1_write+0xcc>
			}
		}

		// Send stop bit
		I2C_GenerateSTOP(I2C1, ENABLE);
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <I2C1_write+0x108>)
 8001d5e:	f7ff f9d0 	bl	8001102 <I2C_GenerateSTOP>
		return false;
 8001d62:	2300      	movs	r3, #0
	}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	007fffff 	.word	0x007fffff
 8001d70:	0800387c 	.word	0x0800387c
 8001d74:	40005400 	.word	0x40005400
 8001d78:	0800388c 	.word	0x0800388c
 8001d7c:	00030001 	.word	0x00030001
 8001d80:	080038a0 	.word	0x080038a0
 8001d84:	00070082 	.word	0x00070082
 8001d88:	080038b8 	.word	0x080038b8
 8001d8c:	00070084 	.word	0x00070084
 8001d90:	080038cc 	.word	0x080038cc

08001d94 <camInit>:

////////////////////////////////////////////////OV7670 Register Configuration///////////////////////////////////////////////////////////////
void camInit(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0


	bool err = false; 						// Set error flag to false
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	71bb      	strb	r3, [r7, #6]
	uint8_t data, i = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	71fb      	strb	r3, [r7, #7]

	for (i = 0; i < OV7670_REG_NUM; i++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	e021      	b.n	8001dec <camInit+0x58>
		data = OVRegisters[i][1]; 					// Copy register value to data
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <camInit+0x6c>)
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	717b      	strb	r3, [r7, #5]
		err = I2C1_write(OVRegisters[i][0], &data);	// Write values to OV register
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <camInit+0x6c>)
 8001db8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001dbc:	1d7a      	adds	r2, r7, #5
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff53 	bl	8001c6c <I2C1_write>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71bb      	strb	r3, [r7, #6]
		if (err == true)
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <camInit+0x4c>
		{
			err_led();	// If returned value is true, blink LED to indicate error
 8001dd0:	f7ff fec8 	bl	8001b64 <err_led>
			printf("Register %d Error\n\r",i+1);
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480a      	ldr	r0, [pc, #40]	; (8001e04 <camInit+0x70>)
 8001ddc:	f000 fecc 	bl	8002b78 <iprintf>
		}

		Delay(0xFF); // Add short delay between each write
 8001de0:	20ff      	movs	r0, #255	; 0xff
 8001de2:	f7ff fe8f 	bl	8001b04 <Delay>
	for (i = 0; i < OV7670_REG_NUM; i++) {
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	3301      	adds	r3, #1
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b7a      	cmp	r3, #122	; 0x7a
 8001df0:	d9da      	bls.n	8001da8 <camInit+0x14>
	}

	printf("Registers Successfully Configured\n\r");
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <camInit+0x74>)
 8001df4:	f000 fec0 	bl	8002b78 <iprintf>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	08003914 	.word	0x08003914
 8001e04:	080038dc 	.word	0x080038dc
 8001e08:	080038f0 	.word	0x080038f0

08001e0c <uart2_tx_init>:

////////////////////////////////////////////////UART Functions///////////////////////////////////////////////////////////////
void uart2_tx_init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001e12:	2101      	movs	r1, #1
 8001e14:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e18:	f7ff fb66 	bl	80014e8 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fb22 	bl	8001468 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; // PA.2 USART2_TX, PA.3 USART2_RX
 8001e24:	230c      	movs	r3, #12
 8001e26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8001e34:	2300      	movs	r3, #0
 8001e36:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481d      	ldr	r0, [pc, #116]	; (8001eb4 <uart2_tx_init+0xa8>)
 8001e40:	f7fe ff12 	bl	8000c68 <GPIO_Init>

	// Set Alternate Function for RX and TX pins
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8001e44:	2207      	movs	r2, #7
 8001e46:	2102      	movs	r1, #2
 8001e48:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <uart2_tx_init+0xa8>)
 8001e4a:	f7fe ffb6 	bl	8000dba <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8001e4e:	2207      	movs	r2, #7
 8001e50:	2103      	movs	r1, #3
 8001e52:	4818      	ldr	r0, [pc, #96]	; (8001eb4 <uart2_tx_init+0xa8>)
 8001e54:	f7fe ffb1 	bl	8000dba <GPIO_PinAFConfig>

	USART_InitStructure.USART_BaudRate = 230400; //230400 works fine for me but 115200 might be a safer option
 8001e58:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8001e5c:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001e66:	2300      	movs	r3, #0
 8001e68:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001e6e:	230c      	movs	r3, #12
 8001e70:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2, &USART_InitStructure);
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	4619      	mov	r1, r3
 8001e78:	480f      	ldr	r0, [pc, #60]	; (8001eb8 <uart2_tx_init+0xac>)
 8001e7a:	f7ff fb75 	bl	8001568 <USART_Init>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f240 5125 	movw	r1, #1317	; 0x525
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <uart2_tx_init+0xac>)
 8001e86:	f7ff fc6b 	bl	8001760 <USART_ITConfig>

	// Enable interrupts for USART2 so that we can detect
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001e8a:	2326      	movs	r3, #38	; 0x26
 8001e8c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb79 	bl	8000594 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <uart2_tx_init+0xac>)
 8001ea6:	f7ff fc19 	bl	80016dc <USART_Cmd>
}
 8001eaa:	bf00      	nop
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40004400 	.word	0x40004400

08001ebc <uart2_write>:


void uart2_write(uint8_t ch)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]

	//make sure transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 8001ec6:	bf00      	nop
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <uart2_write+0x30>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f8      	beq.n	8001ec8 <uart2_write+0xc>


	//write to transmit data register
	USART2->DR = (ch & 0xFF);
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <uart2_write+0x30>)
 8001ed8:	79fa      	ldrb	r2, [r7, #7]
 8001eda:	b292      	uxth	r2, r2
 8001edc:	809a      	strh	r2, [r3, #4]

}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40004400 	.word	0x40004400

08001ef0 <Serial_read>:


uint8_t Serial_read(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	return USART_ReceiveData(USART2);
 8001ef4:	4803      	ldr	r0, [pc, #12]	; (8001f04 <Serial_read+0x14>)
 8001ef6:	f7ff fc23 	bl	8001740 <USART_ReceiveData>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b2db      	uxtb	r3, r3
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40004400 	.word	0x40004400

08001f08 <Serial_log>:
	char buffer[10];
	itoa(val, buffer, 10);
	Serial_log(&buffer[0]);
}

void Serial_log(char *s) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	while (*s) {
 8001f10:	e010      	b.n	8001f34 <Serial_log+0x2c>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8001f12:	bf00      	nop
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <Serial_log+0x40>)
 8001f18:	f7ff fc6a 	bl	80017f0 <USART_GetFlagStatus>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f8      	beq.n	8001f14 <Serial_log+0xc>
			; // Wait for Empty

		USART_SendData(USART2, *s++); // Send Char
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <Serial_log+0x40>)
 8001f30:	f7ff fbf4 	bl	800171c <USART_SendData>
	while (*s) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ea      	bne.n	8001f12 <Serial_log+0xa>
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40004400 	.word	0x40004400

08001f4c <DCMI_Configure>:

////////////////////////////////////////////////DCMI/DMA Functions///////////////////////////////////////////////////////////////
void DCMI_Configure(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b096      	sub	sp, #88	; 0x58
 8001f50:	af00      	add	r7, sp, #0
  DCMI_InitTypeDef DCMI_InitStructure;
  DMA_InitTypeDef  DMA_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

 /* GPIOD Periph clock enable */
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_DCMI, ENABLE);
 8001f52:	2101      	movs	r1, #1
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff faa7 	bl	80014a8 <RCC_AHB2PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff fa83 	bl	8001468 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001f62:	2101      	movs	r1, #1
 8001f64:	2002      	movs	r0, #2
 8001f66:	f7ff fa7f 	bl	8001468 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2004      	movs	r0, #4
 8001f6e:	f7ff fa7b 	bl	8001468 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001f72:	2101      	movs	r1, #1
 8001f74:	2010      	movs	r0, #16
 8001f76:	f7ff fa77 	bl	8001468 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001f80:	f7ff fa72 	bl	8001468 <RCC_AHB1PeriphClockCmd>



 /* DCMI GPIO configuration */

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8001f84:	2310      	movs	r3, #16
 8001f86:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4883      	ldr	r0, [pc, #524]	; (80021b4 <DCMI_Configure+0x268>)
 8001fa8:	f7fe fe5e 	bl	8000c68 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001fac:	2340      	movs	r3, #64	; 0x40
 8001fae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	487a      	ldr	r0, [pc, #488]	; (80021b4 <DCMI_Configure+0x268>)
 8001fca:	f7fe fe4d 	bl	8000c68 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4871      	ldr	r0, [pc, #452]	; (80021b8 <DCMI_Configure+0x26c>)
 8001ff2:	f7fe fe39 	bl	8000c68 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 8001ff6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002002:	2303      	movs	r3, #3
 8002004:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002014:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002018:	4619      	mov	r1, r3
 800201a:	4868      	ldr	r0, [pc, #416]	; (80021bc <DCMI_Configure+0x270>)
 800201c:	f7fe fe24 	bl	8000c68 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 8002020:	2370      	movs	r3, #112	; 0x70
 8002022:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002024:	2302      	movs	r3, #2
 8002026:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800202a:	2303      	movs	r3, #3
 800202c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8002036:	2301      	movs	r3, #1
 8002038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    GPIO_Init(GPIOE, &GPIO_InitStructure);
 800203c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002040:	4619      	mov	r1, r3
 8002042:	485f      	ldr	r0, [pc, #380]	; (80021c0 <DCMI_Configure+0x274>)
 8002044:	f7fe fe10 	bl	8000c68 <GPIO_Init>

/* B7: VSYNC*/
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_DCMI);
 8002048:	220d      	movs	r2, #13
 800204a:	2107      	movs	r1, #7
 800204c:	485a      	ldr	r0, [pc, #360]	; (80021b8 <DCMI_Configure+0x26c>)
 800204e:	f7fe feb4 	bl	8000dba <GPIO_PinAFConfig>
    /* A4: HSYNC*/
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_DCMI);
 8002052:	220d      	movs	r2, #13
 8002054:	2104      	movs	r1, #4
 8002056:	4857      	ldr	r0, [pc, #348]	; (80021b4 <DCMI_Configure+0x268>)
 8002058:	f7fe feaf 	bl	8000dba <GPIO_PinAFConfig>
    /* A6: PCLK*/
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_DCMI);
 800205c:	220d      	movs	r2, #13
 800205e:	2106      	movs	r1, #6
 8002060:	4854      	ldr	r0, [pc, #336]	; (80021b4 <DCMI_Configure+0x268>)
 8002062:	f7fe feaa 	bl	8000dba <GPIO_PinAFConfig>
    /* C6: data0*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_DCMI);
 8002066:	220d      	movs	r2, #13
 8002068:	2106      	movs	r1, #6
 800206a:	4854      	ldr	r0, [pc, #336]	; (80021bc <DCMI_Configure+0x270>)
 800206c:	f7fe fea5 	bl	8000dba <GPIO_PinAFConfig>
    /* C7: data1*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_DCMI);
 8002070:	220d      	movs	r2, #13
 8002072:	2107      	movs	r1, #7
 8002074:	4851      	ldr	r0, [pc, #324]	; (80021bc <DCMI_Configure+0x270>)
 8002076:	f7fe fea0 	bl	8000dba <GPIO_PinAFConfig>
    /* C8: data2*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_DCMI);
 800207a:	220d      	movs	r2, #13
 800207c:	2108      	movs	r1, #8
 800207e:	484f      	ldr	r0, [pc, #316]	; (80021bc <DCMI_Configure+0x270>)
 8002080:	f7fe fe9b 	bl	8000dba <GPIO_PinAFConfig>
    /* C9: data3*/
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_DCMI);
 8002084:	220d      	movs	r2, #13
 8002086:	2109      	movs	r1, #9
 8002088:	484c      	ldr	r0, [pc, #304]	; (80021bc <DCMI_Configure+0x270>)
 800208a:	f7fe fe96 	bl	8000dba <GPIO_PinAFConfig>
    /* E4: data4*/
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource4, GPIO_AF_DCMI);
 800208e:	220d      	movs	r2, #13
 8002090:	2104      	movs	r1, #4
 8002092:	484b      	ldr	r0, [pc, #300]	; (80021c0 <DCMI_Configure+0x274>)
 8002094:	f7fe fe91 	bl	8000dba <GPIO_PinAFConfig>
    /* B6: data5*/
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_DCMI);
 8002098:	220d      	movs	r2, #13
 800209a:	2106      	movs	r1, #6
 800209c:	4846      	ldr	r0, [pc, #280]	; (80021b8 <DCMI_Configure+0x26c>)
 800209e:	f7fe fe8c 	bl	8000dba <GPIO_PinAFConfig>
    /* E5: data6*/
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource5, GPIO_AF_DCMI);
 80020a2:	220d      	movs	r2, #13
 80020a4:	2105      	movs	r1, #5
 80020a6:	4846      	ldr	r0, [pc, #280]	; (80021c0 <DCMI_Configure+0x274>)
 80020a8:	f7fe fe87 	bl	8000dba <GPIO_PinAFConfig>
    /* E6: data7*/
    GPIO_PinAFConfig(GPIOE, GPIO_PinSource6, GPIO_AF_DCMI);
 80020ac:	220d      	movs	r2, #13
 80020ae:	2106      	movs	r1, #6
 80020b0:	4843      	ldr	r0, [pc, #268]	; (80021c0 <DCMI_Configure+0x274>)
 80020b2:	f7fe fe82 	bl	8000dba <GPIO_PinAFConfig>

      /* DCMI configuration */

    	DCMI_DeInit();
 80020b6:	f7fe facf 	bl	8000658 <DCMI_DeInit>
	DCMI_InitStructure.DCMI_CaptureMode = DCMI_CaptureMode_SnapShot; //DCMI_CaptureMode_SnapShot
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	DCMI_InitStructure.DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	DCMI_InitStructure.DCMI_CaptureRate = DCMI_CaptureRate_All_Frame; //DCMI_CaptureRate_All_Frame;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	DCMI_InitStructure.DCMI_PCKPolarity = DCMI_PCKPolarity_Rising;
 80020cc:	2320      	movs	r3, #32
 80020ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	DCMI_InitStructure.DCMI_HSPolarity = DCMI_HSPolarity_Low;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	DCMI_InitStructure.DCMI_VSPolarity = DCMI_VSPolarity_High;
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	DCMI_InitStructure.DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	DCMI_Init(&DCMI_InitStructure);
 80020e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fad3 	bl	8000694 <DCMI_Init>
	DCMI_ITConfig(DCMI_IT_FRAME, ENABLE);
 80020ee:	2101      	movs	r1, #1
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7fe fb4b 	bl	800078c <DCMI_ITConfig>
	DCMI_ITConfig(DCMI_IT_OVF, ENABLE);
 80020f6:	2101      	movs	r1, #1
 80020f8:	2002      	movs	r0, #2
 80020fa:	f7fe fb47 	bl	800078c <DCMI_ITConfig>
	DCMI_ITConfig(DCMI_IT_ERR, ENABLE);
 80020fe:	2101      	movs	r1, #1
 8002100:	2004      	movs	r0, #4
 8002102:	f7fe fb43 	bl	800078c <DCMI_ITConfig>

	// DMA config
	DMA_DeInit(DMA2_Stream1);
 8002106:	482f      	ldr	r0, [pc, #188]	; (80021c4 <DCMI_Configure+0x278>)
 8002108:	f7fe fba6 	bl	8000858 <DMA_DeInit>
	DMA_InitStructure.DMA_Channel = DMA_Channel_1;
 800210c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002110:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) (&DCMI->DR);
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <DCMI_Configure+0x27c>)
 8002114:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) frame_buffer;
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <DCMI_Configure+0x280>)
 8002118:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_BufferSize = IMG_ROWS * IMG_COLUMNS / 2;
 800211e:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8002122:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212c:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8002134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800213e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8002144:	2304      	movs	r3, #4
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8002148:	2303      	movs	r3, #3
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800214c:	2300      	movs	r3, #0
 800214e:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002150:	2300      	movs	r3, #0
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init(DMA2_Stream1, &DMA_InitStructure);
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4619      	mov	r1, r3
 8002158:	481a      	ldr	r0, [pc, #104]	; (80021c4 <DCMI_Configure+0x278>)
 800215a:	f7fe fc51 	bl	8000a00 <DMA_Init>
	DMA_ITConfig(DMA2_Stream1, DMA_IT_TC, ENABLE);
 800215e:	2201      	movs	r2, #1
 8002160:	2110      	movs	r1, #16
 8002162:	4818      	ldr	r0, [pc, #96]	; (80021c4 <DCMI_Configure+0x278>)
 8002164:	f7fe fcc0 	bl	8000ae8 <DMA_ITConfig>
	DMA_ITConfig(DMA2_Stream1, DMA_IT_TE, ENABLE);
 8002168:	2201      	movs	r2, #1
 800216a:	2104      	movs	r1, #4
 800216c:	4815      	ldr	r0, [pc, #84]	; (80021c4 <DCMI_Configure+0x278>)
 800216e:	f7fe fcbb 	bl	8000ae8 <DMA_ITConfig>

	/* DMA2 IRQ channel Configuration */
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream1_IRQn;
 8002172:	2339      	movs	r3, #57	; 0x39
 8002174:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800217e:	2301      	movs	r3, #1
 8002180:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8002182:	463b      	mov	r3, r7
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fa05 	bl	8000594 <NVIC_Init>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800218a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800218e:	f7fe f9ed 	bl	800056c <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = DCMI_IRQn;
 8002192:	234e      	movs	r3, #78	; 0x4e
 8002194:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8002196:	2302      	movs	r3, #2
 8002198:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 800219a:	2302      	movs	r3, #2
 800219c:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 80021a2:	463b      	mov	r3, r7
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9f5 	bl	8000594 <NVIC_Init>

	//DMA_Cmd(DMA2_Stream1, ENABLE);
	//DCMI_Cmd(ENABLE);
	//DCMI_CaptureCmd(ENABLE);
}
 80021aa:	bf00      	nop
 80021ac:	3758      	adds	r7, #88	; 0x58
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40026428 	.word	0x40026428
 80021c8:	50050028 	.word	0x50050028
 80021cc:	20000024 	.word	0x20000024

080021d0 <CaptureFrame>:

void CaptureFrame(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	DMA_Cmd(DMA2_Stream1, ENABLE);
 80021d4:	2101      	movs	r1, #1
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <CaptureFrame+0x1c>)
 80021d8:	f7fe fc6a 	bl	8000ab0 <DMA_Cmd>
	DCMI_Cmd(ENABLE);
 80021dc:	2001      	movs	r0, #1
 80021de:	f7fe fa99 	bl	8000714 <DCMI_Cmd>
	DCMI_CaptureCmd(ENABLE);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe fab4 	bl	8000750 <DCMI_CaptureCmd>
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40026428 	.word	0x40026428

080021f0 <YUVtoGREY_2D>:

////////////////////////////////////////////////Image Processing Functions///////////////////////////////////////////////////////////////

//Convert YUV422 Buffer to GreyScale

void YUVtoGREY_2D(uint16_t volatile *frame_buffer, uint8_t volatile buffer_2D[IMG_ROWS][IMG_COLUMNS]) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]

	uint8_t volatile *buffer = (uint8_t *) frame_buffer;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	61bb      	str	r3, [r7, #24]
    uint16_t length = IMG_ROWS * IMG_COLUMNS * 2;
 80021fe:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8002202:	82fb      	strh	r3, [r7, #22]
    memset(PixelCounter, 0, sizeof(PixelCounter));
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	2100      	movs	r1, #0
 800220a:	4824      	ldr	r0, [pc, #144]	; (800229c <YUVtoGREY_2D+0xac>)
 800220c:	f000 fd09 	bl	8002c22 <memset>

    for (int i = 0; i < length; i += 2)
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	e038      	b.n	8002288 <YUVtoGREY_2D+0x98>
    {
    	uint16_t index = i / 2;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	0fda      	lsrs	r2, r3, #31
 800221a:	4413      	add	r3, r2
 800221c:	105b      	asrs	r3, r3, #1
 800221e:	82bb      	strh	r3, [r7, #20]
    	uint16_t row = index / IMG_COLUMNS;
 8002220:	8abb      	ldrh	r3, [r7, #20]
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <YUVtoGREY_2D+0xb0>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	09db      	lsrs	r3, r3, #7
 800222a:	827b      	strh	r3, [r7, #18]
    	uint16_t col = index % IMG_COLUMNS;
 800222c:	8aba      	ldrh	r2, [r7, #20]
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <YUVtoGREY_2D+0xb0>)
 8002230:	fba3 1302 	umull	r1, r3, r3, r2
 8002234:	09d9      	lsrs	r1, r3, #7
 8002236:	460b      	mov	r3, r1
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	015b      	lsls	r3, r3, #5
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	823b      	strh	r3, [r7, #16]
        buffer_2D[row][col] = buffer[i + 1];
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	18d1      	adds	r1, r2, r3
 800224a:	8a7a      	ldrh	r2, [r7, #18]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	461a      	mov	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	441a      	add	r2, r3
 800225a:	8a3b      	ldrh	r3, [r7, #16]
 800225c:	7809      	ldrb	r1, [r1, #0]
 800225e:	b2c9      	uxtb	r1, r1
 8002260:	54d1      	strb	r1, [r2, r3]
		uint8_t graylevel = buffer[i + 1];
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3301      	adds	r3, #1
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	73fb      	strb	r3, [r7, #15]
        PixelCounter[graylevel]++;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <YUVtoGREY_2D+0xac>)
 8002272:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002276:	b292      	uxth	r2, r2
 8002278:	3201      	adds	r2, #1
 800227a:	b291      	uxth	r1, r2
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <YUVtoGREY_2D+0xac>)
 800227e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < length; i += 2)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3302      	adds	r3, #2
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	8afb      	ldrh	r3, [r7, #22]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbc2      	blt.n	8002216 <YUVtoGREY_2D+0x26>
    }

}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000b424 	.word	0x2000b424
 80022a0:	cccccccd 	.word	0xcccccccd

080022a4 <Histogram>:
// At the end of this function, buffer_2D now contains the Y components of frame_buffer (Greyscale of image)
//Pixelcounter is updated with occurrence of each pixel of values 0 - 255

//Perform Histogram processing to obtain Mean,SD,Threshold
 void Histogram(volatile uint16_t PixelCounter[256])
{
 80022a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a8:	b08e      	sub	sp, #56	; 0x38
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6278      	str	r0, [r7, #36]	; 0x24
	SumSquaredDiffs = 0;
 80022ae:	4950      	ldr	r1, [pc, #320]	; (80023f0 <Histogram+0x14c>)
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]
	Sum = 0;
 80022bc:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <Histogram+0x150>)
 80022be:	2300      	movs	r3, #0
 80022c0:	6013      	str	r3, [r2, #0]

	// Calculate Mean of Image
	for(int j = 0; j<256 ; j++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
 80022c6:	e012      	b.n	80022ee <Histogram+0x4a>
	{
		Sum += (j*PixelCounter[j]);
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	005a      	lsls	r2, r3, #1
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	4413      	add	r3, r2
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <Histogram+0x150>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	441a      	add	r2, r3
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <Histogram+0x150>)
 80022e6:	601a      	str	r2, [r3, #0]
	for(int j = 0; j<256 ; j++)
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	3301      	adds	r3, #1
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	2bff      	cmp	r3, #255	; 0xff
 80022f2:	dde9      	ble.n	80022c8 <Histogram+0x24>
	}


	Mean = (uint32_t)((Sum + (GSLength / 2)) / GSLength);
 80022f4:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <Histogram+0x154>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	085a      	lsrs	r2, r3, #1
 80022fa:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <Histogram+0x150>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	441a      	add	r2, r3
 8002300:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <Histogram+0x154>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fbb2 f2f3 	udiv	r2, r2, r3
 8002308:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <Histogram+0x158>)
 800230a:	601a      	str	r2, [r3, #0]


	// Calculate the sum of squared differences for standard deviation
    for (int i = 0; i < 256; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
 8002310:	e02d      	b.n	800236e <Histogram+0xca>
    {
        int32_t diff = i - Mean;
 8002312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002314:	4b39      	ldr	r3, [pc, #228]	; (80023fc <Histogram+0x158>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
        SumSquaredDiffs += (uint64_t)(diff * diff) * PixelCounter[i];
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	fb03 f303 	mul.w	r3, r3, r3
 8002322:	17da      	asrs	r2, r3, #31
 8002324:	4698      	mov	r8, r3
 8002326:	4691      	mov	r9, r2
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	005a      	lsls	r2, r3, #1
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	b29b      	uxth	r3, r3
 8002336:	2200      	movs	r2, #0
 8002338:	469a      	mov	sl, r3
 800233a:	4693      	mov	fp, r2
 800233c:	fb0a f209 	mul.w	r2, sl, r9
 8002340:	fb08 f30b 	mul.w	r3, r8, fp
 8002344:	4413      	add	r3, r2
 8002346:	fba8 450a 	umull	r4, r5, r8, sl
 800234a:	442b      	add	r3, r5
 800234c:	461d      	mov	r5, r3
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <Histogram+0x14c>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	18a1      	adds	r1, r4, r2
 8002356:	61b9      	str	r1, [r7, #24]
 8002358:	eb45 0303 	adc.w	r3, r5, r3
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <Histogram+0x14c>)
 8002360:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002364:	e9c3 1200 	strd	r1, r2, [r3]
    for (int i = 0; i < 256; i++)
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	3301      	adds	r3, #1
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	2bff      	cmp	r3, #255	; 0xff
 8002372:	ddce      	ble.n	8002312 <Histogram+0x6e>
    }


    // Calculate standard deviation
    StdDev1 = (SumSquaredDiffs + (GSLength / 2));
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <Histogram+0x154>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	2200      	movs	r2, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	617a      	str	r2, [r7, #20]
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <Histogram+0x14c>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800238a:	4621      	mov	r1, r4
 800238c:	1889      	adds	r1, r1, r2
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	4629      	mov	r1, r5
 8002392:	eb43 0101 	adc.w	r1, r3, r1
 8002396:	60f9      	str	r1, [r7, #12]
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <Histogram+0x15c>)
 800239a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800239e:	e9c3 1200 	strd	r1, r2, [r3]
    StdDev2 = StdDev1/GSLength;
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <Histogram+0x15c>)
 80023a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <Histogram+0x154>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023b6:	f7fd ff5b 	bl	8000270 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4911      	ldr	r1, [pc, #68]	; (8002404 <Histogram+0x160>)
 80023c0:	e9c1 2300 	strd	r2, r3, [r1]
    StdDevInt = sqr_root(StdDev2);
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <Histogram+0x160>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f000 f81f 	bl	8002410 <sqr_root>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <Histogram+0x164>)
 80023d6:	6013      	str	r3, [r2, #0]
    // Mean and StdDev now contain the mean and standard deviation of the pixel values

	threshold = Mean + StdDevInt;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <Histogram+0x158>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <Histogram+0x164>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <Histogram+0x168>)
 80023e4:	6013      	str	r3, [r2, #0]



}
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	; 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f0:	20016c48 	.word	0x20016c48
 80023f4:	20016c28 	.word	0x20016c28
 80023f8:	10000014 	.word	0x10000014
 80023fc:	20016c2c 	.word	0x20016c2c
 8002400:	20016c30 	.word	0x20016c30
 8002404:	20016c38 	.word	0x20016c38
 8002408:	20016c40 	.word	0x20016c40
 800240c:	20016c50 	.word	0x20016c50

08002410 <sqr_root>:



 uint32_t sqr_root(uint64_t num) {
 8002410:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002414:	b088      	sub	sp, #32
 8002416:	af00      	add	r7, sp, #0
 8002418:	e9c7 0102 	strd	r0, r1, [r7, #8]
     if (num == 0) {
 800241c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002420:	4313      	orrs	r3, r2
 8002422:	d101      	bne.n	8002428 <sqr_root+0x18>
         return 0;
 8002424:	2300      	movs	r3, #0
 8002426:	e070      	b.n	800250a <sqr_root+0xfa>
     }

     uint64_t res = 0;
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9c7 2306 	strd	r2, r3, [r7, #24]
     uint64_t bit = 1ULL << 62;  // The second-to-top bit is set
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800243c:	e9c7 2304 	strd	r2, r3, [r7, #16]

     // "bit" starts at the highest power of four <= the argument.
     while (bit > num) {
 8002440:	e00b      	b.n	800245a <sqr_root+0x4a>
         bit >>= 2;
 8002442:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	0882      	lsrs	r2, r0, #2
 8002450:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8002454:	088b      	lsrs	r3, r1, #2
 8002456:	e9c7 2304 	strd	r2, r3, [r7, #16]
     while (bit > num) {
 800245a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800245e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002462:	4290      	cmp	r0, r2
 8002464:	eb71 0303 	sbcs.w	r3, r1, r3
 8002468:	d3eb      	bcc.n	8002442 <sqr_root+0x32>
     }

     while (bit != 0) {
 800246a:	e049      	b.n	8002500 <sqr_root+0xf0>
         if (num >= res + bit) {
 800246c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002474:	1884      	adds	r4, r0, r2
 8002476:	eb41 0503 	adc.w	r5, r1, r3
 800247a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800247e:	42a2      	cmp	r2, r4
 8002480:	41ab      	sbcs	r3, r5
 8002482:	d325      	bcc.n	80024d0 <sqr_root+0xc0>
             num -= res + bit;
 8002484:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002488:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800248c:	eb10 0802 	adds.w	r8, r0, r2
 8002490:	eb41 0903 	adc.w	r9, r1, r3
 8002494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002498:	ebb2 0a08 	subs.w	sl, r2, r8
 800249c:	eb63 0b09 	sbc.w	fp, r3, r9
 80024a0:	e9c7 ab02 	strd	sl, fp, [r7, #8]
             res = (res >> 1) + bit;
 80024a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	0842      	lsrs	r2, r0, #1
 80024b2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80024b6:	084b      	lsrs	r3, r1, #1
 80024b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024bc:	1886      	adds	r6, r0, r2
 80024be:	603e      	str	r6, [r7, #0]
 80024c0:	eb41 0303 	adc.w	r3, r1, r3
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80024ce:	e00b      	b.n	80024e8 <sqr_root+0xd8>
         } else {
             res >>= 1;
 80024d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	0842      	lsrs	r2, r0, #1
 80024de:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80024e2:	084b      	lsrs	r3, r1, #1
 80024e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
         }
         bit >>= 2;
 80024e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	0882      	lsrs	r2, r0, #2
 80024f6:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80024fa:	088b      	lsrs	r3, r1, #2
 80024fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
     while (bit != 0) {
 8002500:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	d1b1      	bne.n	800246c <sqr_root+0x5c>
     }

     return (uint32_t)res;
 8002508:	69bb      	ldr	r3, [r7, #24]
 }
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002514:	4770      	bx	lr
	...

08002518 <TransmitLine_2D_UP>:


}

void TransmitLine_2D_UP( volatile uint8_t Pimage[IMG_ROWS][IMG_COLUMNS])
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

	for(int j = 0;j<IMG_ROWS;j++)
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e07c      	b.n	8002620 <TransmitLine_2D_UP+0x108>
	{

		while(1)
		{

			if(sendLine_flag == true)
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <TransmitLine_2D_UP+0x11c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0fa      	beq.n	8002526 <TransmitLine_2D_UP+0xe>
			{

				if(CompHis == true)
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <TransmitLine_2D_UP+0x120>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <TransmitLine_2D_UP+0x3a>
				{
					uart2_write(Mean);
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <TransmitLine_2D_UP+0x124>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fcbc 	bl	8001ebc <uart2_write>
					uart2_write(StdDevInt);
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <TransmitLine_2D_UP+0x128>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fcb6 	bl	8001ebc <uart2_write>
 8002550:	e009      	b.n	8002566 <TransmitLine_2D_UP+0x4e>

				}

				else
				{
					uart2_write(Histogram_DIS);
 8002552:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <TransmitLine_2D_UP+0x12c>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fcb0 	bl	8001ebc <uart2_write>
					uart2_write(Histogram_DIS);
 800255c:	4b39      	ldr	r3, [pc, #228]	; (8002644 <TransmitLine_2D_UP+0x12c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fcab 	bl	8001ebc <uart2_write>
				}

				uart2_write(startchar);
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <TransmitLine_2D_UP+0x130>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fca6 	bl	8001ebc <uart2_write>
				uart2_write(j);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fca1 	bl	8001ebc <uart2_write>
				uart2_write(IMG_COLUMNS);
 800257a:	20a0      	movs	r0, #160	; 0xa0
 800257c:	f7ff fc9e 	bl	8001ebc <uart2_write>


				for(int k = 0; k<IMG_COLUMNS; k++)
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e042      	b.n	800260c <TransmitLine_2D_UP+0xf4>
					{


						temp = Pimage[j][k];
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	015b      	lsls	r3, r3, #5
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	441a      	add	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <TransmitLine_2D_UP+0x134>)
 80025a0:	701a      	strb	r2, [r3, #0]

						if ((CompHis == true && BrightSpotD == true) || SobelT == true )
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <TransmitLine_2D_UP+0x120>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <TransmitLine_2D_UP+0x9a>
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <TransmitLine_2D_UP+0x138>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <TransmitLine_2D_UP+0xa2>
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <TransmitLine_2D_UP+0x13c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <TransmitLine_2D_UP+0xc0>
						{
							if (temp > threshold)
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <TransmitLine_2D_UP+0x134>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <TransmitLine_2D_UP+0x140>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d903      	bls.n	80025d2 <TransmitLine_2D_UP+0xba>
							{
								temp = 255;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <TransmitLine_2D_UP+0x134>)
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e002      	b.n	80025d8 <TransmitLine_2D_UP+0xc0>
							}

							else
							{
								temp = 0;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <TransmitLine_2D_UP+0x134>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
							}
						}

						temp = (uint8_t)((temp*127)/(255));
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <TransmitLine_2D_UP+0x134>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	4613      	mov	r3, r2
 80025e2:	01db      	lsls	r3, r3, #7
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	4a1d      	ldr	r2, [pc, #116]	; (800265c <TransmitLine_2D_UP+0x144>)
 80025e8:	fb82 1203 	smull	r1, r2, r2, r3
 80025ec:	441a      	add	r2, r3
 80025ee:	11d2      	asrs	r2, r2, #7
 80025f0:	17db      	asrs	r3, r3, #31
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <TransmitLine_2D_UP+0x134>)
 80025f8:	701a      	strb	r2, [r3, #0]
						uart2_write(temp);
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <TransmitLine_2D_UP+0x134>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fc5b 	bl	8001ebc <uart2_write>
				for(int k = 0; k<IMG_COLUMNS; k++)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3301      	adds	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b9f      	cmp	r3, #159	; 0x9f
 8002610:	ddb9      	ble.n	8002586 <TransmitLine_2D_UP+0x6e>

					}
				sendLine_flag = false;
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <TransmitLine_2D_UP+0x11c>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
				break;
 8002618:	bf00      	nop
	for(int j = 0;j<IMG_ROWS;j++)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b8f      	cmp	r3, #143	; 0x8f
 8002624:	f77f af7f 	ble.w	8002526 <TransmitLine_2D_UP+0xe>
		}

	}


}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2000001d 	.word	0x2000001d
 8002638:	2000001f 	.word	0x2000001f
 800263c:	20016c2c 	.word	0x20016c2c
 8002640:	20016c40 	.word	0x20016c40
 8002644:	10000011 	.word	0x10000011
 8002648:	10000010 	.word	0x10000010
 800264c:	20016c24 	.word	0x20016c24
 8002650:	2000001e 	.word	0x2000001e
 8002654:	20000021 	.word	0x20000021
 8002658:	20016c50 	.word	0x20016c50
 800265c:	80808081 	.word	0x80808081

08002660 <SobelEdgeDetection>:

void SobelEdgeDetection(uint8_t input[IMG_ROWS][IMG_COLUMNS], uint8_t output[IMG_ROWS][IMG_COLUMNS]) {
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
    int gx, gy;
    int magnitude;
    memset(EdgePixelCounter, 0, sizeof(EdgePixelCounter));
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	2100      	movs	r1, #0
 8002670:	4878      	ldr	r0, [pc, #480]	; (8002854 <SobelEdgeDetection+0x1f4>)
 8002672:	f000 fad6 	bl	8002c22 <memset>

    for (int i = 1; i < IMG_ROWS - 1; i++) {
 8002676:	2301      	movs	r3, #1
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e0e2      	b.n	8002842 <SobelEdgeDetection+0x1e2>
        for (int j = 1; j < IMG_COLUMNS - 1; j++) {
 800267c:	2301      	movs	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e0d8      	b.n	8002834 <SobelEdgeDetection+0x1d4>
            gx = (-1 * input[i - 1][j - 1]) + (1 * input[i - 1][j + 1])
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	015b      	lsls	r3, r3, #5
 800268c:	3ba0      	subs	r3, #160	; 0xa0
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	441a      	add	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	4619      	mov	r1, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	3ba0      	subs	r3, #160	; 0xa0
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	441a      	add	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	1ac9      	subs	r1, r1, r3
               + (-2 * input[i][j - 1])     + (2 * input[i][j + 1])
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	015b      	lsls	r3, r3, #5
 80026bc:	461a      	mov	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	441a      	add	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4613      	mov	r3, r2
 80026cc:	07db      	lsls	r3, r3, #31
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4419      	add	r1, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	015b      	lsls	r3, r3, #5
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	441a      	add	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4419      	add	r1, r3
               + (-1 * input[i + 1][j - 1]) + (1 * input[i + 1][j + 1]);
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	015b      	lsls	r3, r3, #5
 80026fa:	461a      	mov	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	441a      	add	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3b01      	subs	r3, #1
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	1ac9      	subs	r1, r1, r3
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	015b      	lsls	r3, r3, #5
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	441a      	add	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	5cd3      	ldrb	r3, [r2, r3]
            gx = (-1 * input[i - 1][j - 1]) + (1 * input[i - 1][j + 1])
 8002720:	440b      	add	r3, r1
 8002722:	613b      	str	r3, [r7, #16]

            gy = (-1 * input[i - 1][j - 1]) + (-2 * input[i - 1][j]) + (-1 * input[i - 1][j + 1])
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	015b      	lsls	r3, r3, #5
 800272e:	3ba0      	subs	r3, #160	; 0xa0
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	441a      	add	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	4613      	mov	r3, r2
 800273e:	07db      	lsls	r3, r3, #31
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4619      	mov	r1, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	015b      	lsls	r3, r3, #5
 8002750:	3ba0      	subs	r3, #160	; 0xa0
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	441a      	add	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3b01      	subs	r3, #1
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	1ac9      	subs	r1, r1, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	015b      	lsls	r3, r3, #5
 8002768:	3ba0      	subs	r3, #160	; 0xa0
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	441a      	add	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	1ac9      	subs	r1, r1, r3
               + (1 * input[i + 1][j - 1])  + (2 * input[i + 1][j])  + (1 * input[i + 1][j + 1]);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	015b      	lsls	r3, r3, #5
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	441a      	add	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3b01      	subs	r3, #1
 800278c:	5cd3      	ldrb	r3, [r2, r3]
 800278e:	4419      	add	r1, r3
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	441a      	add	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	4413      	add	r3, r2
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4419      	add	r1, r3
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	015b      	lsls	r3, r3, #5
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	441a      	add	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
            gy = (-1 * input[i - 1][j - 1]) + (-2 * input[i - 1][j]) + (-1 * input[i - 1][j + 1])
 80027c4:	440b      	add	r3, r1
 80027c6:	60fb      	str	r3, [r7, #12]

            magnitude = sqr_root((gx * gx) + (gy * gy));
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	fb03 f203 	mul.w	r2, r3, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	fb03 f303 	mul.w	r3, r3, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	17da      	asrs	r2, r3, #31
 80027d8:	461c      	mov	r4, r3
 80027da:	4615      	mov	r5, r2
 80027dc:	4620      	mov	r0, r4
 80027de:	4629      	mov	r1, r5
 80027e0:	f7ff fe16 	bl	8002410 <sqr_root>
 80027e4:	4603      	mov	r3, r0
 80027e6:	61fb      	str	r3, [r7, #28]

            if (magnitude < 0) magnitude = 0;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da01      	bge.n	80027f2 <SobelEdgeDetection+0x192>
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
            if (magnitude > 255) magnitude = 255;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2bff      	cmp	r3, #255	; 0xff
 80027f6:	dd01      	ble.n	80027fc <SobelEdgeDetection+0x19c>
 80027f8:	23ff      	movs	r3, #255	; 0xff
 80027fa:	61fb      	str	r3, [r7, #28]

            EdgePixelCounter[magnitude]++;
 80027fc:	4a15      	ldr	r2, [pc, #84]	; (8002854 <SobelEdgeDetection+0x1f4>)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002804:	b29b      	uxth	r3, r3
 8002806:	3301      	adds	r3, #1
 8002808:	b299      	uxth	r1, r3
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <SobelEdgeDetection+0x1f4>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            output[i][j] = magnitude;
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	015b      	lsls	r3, r3, #5
 800281c:	461a      	mov	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	441a      	add	r2, r3
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	b2d9      	uxtb	r1, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	4413      	add	r3, r2
 800282a:	460a      	mov	r2, r1
 800282c:	701a      	strb	r2, [r3, #0]
        for (int j = 1; j < IMG_COLUMNS - 1; j++) {
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b9e      	cmp	r3, #158	; 0x9e
 8002838:	f77f af23 	ble.w	8002682 <SobelEdgeDetection+0x22>
    for (int i = 1; i < IMG_ROWS - 1; i++) {
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	3301      	adds	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b8e      	cmp	r3, #142	; 0x8e
 8002846:	f77f af19 	ble.w	800267c <SobelEdgeDetection+0x1c>

        }
    }
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bdb0      	pop	{r4, r5, r7, pc}
 8002854:	2000b624 	.word	0x2000b624

08002858 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e00a      	b.n	8002880 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800286a:	f3af 8000 	nop.w
 800286e:	4601      	mov	r1, r0
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	60ba      	str	r2, [r7, #8]
 8002876:	b2ca      	uxtb	r2, r1
 8002878:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3301      	adds	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	dbf0      	blt.n	800286a <_read+0x12>
  }

  return len;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e009      	b.n	80028b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	60ba      	str	r2, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe ffcc 	bl	800184a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3301      	adds	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dbf1      	blt.n	80028a4 <_write+0x12>
  }
  return len;
 80028c0:	687b      	ldr	r3, [r7, #4]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_close>:

int _close(int file)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028f2:	605a      	str	r2, [r3, #4]
  return 0;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_isatty>:

int _isatty(int file)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800290a:	2301      	movs	r3, #1
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <_sbrk+0x5c>)
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <_sbrk+0x60>)
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <_sbrk+0x64>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <_sbrk+0x68>)
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d207      	bcs.n	8002974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002964:	f000 f9ac 	bl	8002cc0 <__errno>
 8002968:	4603      	mov	r3, r0
 800296a:	220c      	movs	r2, #12
 800296c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	e009      	b.n	8002988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <_sbrk+0x64>)
 8002984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20020000 	.word	0x20020000
 8002994:	00000400 	.word	0x00000400
 8002998:	20016c54 	.word	0x20016c54
 800299c:	20016da8 	.word	0x20016da8

080029a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029a0:	480d      	ldr	r0, [pc, #52]	; (80029d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a8:	480c      	ldr	r0, [pc, #48]	; (80029dc <LoopForever+0x6>)
  ldr r1, =_edata
 80029aa:	490d      	ldr	r1, [pc, #52]	; (80029e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029ac:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <LoopForever+0xe>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b0:	e002      	b.n	80029b8 <LoopCopyDataInit>

080029b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b6:	3304      	adds	r3, #4

080029b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029bc:	d3f9      	bcc.n	80029b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029c0:	4c0a      	ldr	r4, [pc, #40]	; (80029ec <LoopForever+0x16>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c4:	e001      	b.n	80029ca <LoopFillZerobss>

080029c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c8:	3204      	adds	r2, #4

080029ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029cc:	d3fb      	bcc.n	80029c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029ce:	f000 f97d 	bl	8002ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029d2:	f7fe ff49 	bl	8001868 <main>

080029d6 <LoopForever>:

LoopForever:
  b LoopForever
 80029d6:	e7fe      	b.n	80029d6 <LoopForever>
  ldr   r0, =_estack
 80029d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029dc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 80029e0:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 80029e4:	08003a50 	.word	0x08003a50
  ldr r2, =_sbss
 80029e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80029ec:	20016da4 	.word	0x20016da4

080029f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029f0:	e7fe      	b.n	80029f0 <ADC_IRQHandler>
	...

080029f4 <std>:
 80029f4:	2300      	movs	r3, #0
 80029f6:	b510      	push	{r4, lr}
 80029f8:	4604      	mov	r4, r0
 80029fa:	e9c0 3300 	strd	r3, r3, [r0]
 80029fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a02:	6083      	str	r3, [r0, #8]
 8002a04:	8181      	strh	r1, [r0, #12]
 8002a06:	6643      	str	r3, [r0, #100]	; 0x64
 8002a08:	81c2      	strh	r2, [r0, #14]
 8002a0a:	6183      	str	r3, [r0, #24]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	2208      	movs	r2, #8
 8002a10:	305c      	adds	r0, #92	; 0x5c
 8002a12:	f000 f906 	bl	8002c22 <memset>
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <std+0x58>)
 8002a18:	6263      	str	r3, [r4, #36]	; 0x24
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <std+0x5c>)
 8002a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <std+0x60>)
 8002a20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <std+0x64>)
 8002a24:	6323      	str	r3, [r4, #48]	; 0x30
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <std+0x68>)
 8002a28:	6224      	str	r4, [r4, #32]
 8002a2a:	429c      	cmp	r4, r3
 8002a2c:	d006      	beq.n	8002a3c <std+0x48>
 8002a2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002a32:	4294      	cmp	r4, r2
 8002a34:	d002      	beq.n	8002a3c <std+0x48>
 8002a36:	33d0      	adds	r3, #208	; 0xd0
 8002a38:	429c      	cmp	r4, r3
 8002a3a:	d105      	bne.n	8002a48 <std+0x54>
 8002a3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a44:	f000 b966 	b.w	8002d14 <__retarget_lock_init_recursive>
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	bf00      	nop
 8002a4c:	08002b9d 	.word	0x08002b9d
 8002a50:	08002bbf 	.word	0x08002bbf
 8002a54:	08002bf7 	.word	0x08002bf7
 8002a58:	08002c1b 	.word	0x08002c1b
 8002a5c:	20016c58 	.word	0x20016c58

08002a60 <stdio_exit_handler>:
 8002a60:	4a02      	ldr	r2, [pc, #8]	; (8002a6c <stdio_exit_handler+0xc>)
 8002a62:	4903      	ldr	r1, [pc, #12]	; (8002a70 <stdio_exit_handler+0x10>)
 8002a64:	4803      	ldr	r0, [pc, #12]	; (8002a74 <stdio_exit_handler+0x14>)
 8002a66:	f000 b869 	b.w	8002b3c <_fwalk_sglue>
 8002a6a:	bf00      	nop
 8002a6c:	10000018 	.word	0x10000018
 8002a70:	080035c1 	.word	0x080035c1
 8002a74:	10000024 	.word	0x10000024

08002a78 <cleanup_stdio>:
 8002a78:	6841      	ldr	r1, [r0, #4]
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <cleanup_stdio+0x34>)
 8002a7c:	4299      	cmp	r1, r3
 8002a7e:	b510      	push	{r4, lr}
 8002a80:	4604      	mov	r4, r0
 8002a82:	d001      	beq.n	8002a88 <cleanup_stdio+0x10>
 8002a84:	f000 fd9c 	bl	80035c0 <_fflush_r>
 8002a88:	68a1      	ldr	r1, [r4, #8]
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <cleanup_stdio+0x38>)
 8002a8c:	4299      	cmp	r1, r3
 8002a8e:	d002      	beq.n	8002a96 <cleanup_stdio+0x1e>
 8002a90:	4620      	mov	r0, r4
 8002a92:	f000 fd95 	bl	80035c0 <_fflush_r>
 8002a96:	68e1      	ldr	r1, [r4, #12]
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <cleanup_stdio+0x3c>)
 8002a9a:	4299      	cmp	r1, r3
 8002a9c:	d004      	beq.n	8002aa8 <cleanup_stdio+0x30>
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aa4:	f000 bd8c 	b.w	80035c0 <_fflush_r>
 8002aa8:	bd10      	pop	{r4, pc}
 8002aaa:	bf00      	nop
 8002aac:	20016c58 	.word	0x20016c58
 8002ab0:	20016cc0 	.word	0x20016cc0
 8002ab4:	20016d28 	.word	0x20016d28

08002ab8 <global_stdio_init.part.0>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <global_stdio_init.part.0+0x30>)
 8002abc:	4c0b      	ldr	r4, [pc, #44]	; (8002aec <global_stdio_init.part.0+0x34>)
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <global_stdio_init.part.0+0x38>)
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	f7ff ff94 	bl	80029f4 <std>
 8002acc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2109      	movs	r1, #9
 8002ad4:	f7ff ff8e 	bl	80029f4 <std>
 8002ad8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002adc:	2202      	movs	r2, #2
 8002ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae2:	2112      	movs	r1, #18
 8002ae4:	f7ff bf86 	b.w	80029f4 <std>
 8002ae8:	20016d90 	.word	0x20016d90
 8002aec:	20016c58 	.word	0x20016c58
 8002af0:	08002a61 	.word	0x08002a61

08002af4 <__sfp_lock_acquire>:
 8002af4:	4801      	ldr	r0, [pc, #4]	; (8002afc <__sfp_lock_acquire+0x8>)
 8002af6:	f000 b90e 	b.w	8002d16 <__retarget_lock_acquire_recursive>
 8002afa:	bf00      	nop
 8002afc:	20016d99 	.word	0x20016d99

08002b00 <__sfp_lock_release>:
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <__sfp_lock_release+0x8>)
 8002b02:	f000 b909 	b.w	8002d18 <__retarget_lock_release_recursive>
 8002b06:	bf00      	nop
 8002b08:	20016d99 	.word	0x20016d99

08002b0c <__sinit>:
 8002b0c:	b510      	push	{r4, lr}
 8002b0e:	4604      	mov	r4, r0
 8002b10:	f7ff fff0 	bl	8002af4 <__sfp_lock_acquire>
 8002b14:	6a23      	ldr	r3, [r4, #32]
 8002b16:	b11b      	cbz	r3, 8002b20 <__sinit+0x14>
 8002b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b1c:	f7ff bff0 	b.w	8002b00 <__sfp_lock_release>
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <__sinit+0x28>)
 8002b22:	6223      	str	r3, [r4, #32]
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__sinit+0x2c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f5      	bne.n	8002b18 <__sinit+0xc>
 8002b2c:	f7ff ffc4 	bl	8002ab8 <global_stdio_init.part.0>
 8002b30:	e7f2      	b.n	8002b18 <__sinit+0xc>
 8002b32:	bf00      	nop
 8002b34:	08002a79 	.word	0x08002a79
 8002b38:	20016d90 	.word	0x20016d90

08002b3c <_fwalk_sglue>:
 8002b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b40:	4607      	mov	r7, r0
 8002b42:	4688      	mov	r8, r1
 8002b44:	4614      	mov	r4, r2
 8002b46:	2600      	movs	r6, #0
 8002b48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b4c:	f1b9 0901 	subs.w	r9, r9, #1
 8002b50:	d505      	bpl.n	8002b5e <_fwalk_sglue+0x22>
 8002b52:	6824      	ldr	r4, [r4, #0]
 8002b54:	2c00      	cmp	r4, #0
 8002b56:	d1f7      	bne.n	8002b48 <_fwalk_sglue+0xc>
 8002b58:	4630      	mov	r0, r6
 8002b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b5e:	89ab      	ldrh	r3, [r5, #12]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d907      	bls.n	8002b74 <_fwalk_sglue+0x38>
 8002b64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	d003      	beq.n	8002b74 <_fwalk_sglue+0x38>
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	4638      	mov	r0, r7
 8002b70:	47c0      	blx	r8
 8002b72:	4306      	orrs	r6, r0
 8002b74:	3568      	adds	r5, #104	; 0x68
 8002b76:	e7e9      	b.n	8002b4c <_fwalk_sglue+0x10>

08002b78 <iprintf>:
 8002b78:	b40f      	push	{r0, r1, r2, r3}
 8002b7a:	b507      	push	{r0, r1, r2, lr}
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <iprintf+0x20>)
 8002b7e:	ab04      	add	r3, sp, #16
 8002b80:	6808      	ldr	r0, [r1, #0]
 8002b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b86:	6881      	ldr	r1, [r0, #8]
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	f000 f9e9 	bl	8002f60 <_vfiprintf_r>
 8002b8e:	b003      	add	sp, #12
 8002b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b94:	b004      	add	sp, #16
 8002b96:	4770      	bx	lr
 8002b98:	10000070 	.word	0x10000070

08002b9c <__sread>:
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba4:	f000 f868 	bl	8002c78 <_read_r>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	bfab      	itete	ge
 8002bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bae:	89a3      	ldrhlt	r3, [r4, #12]
 8002bb0:	181b      	addge	r3, r3, r0
 8002bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bb6:	bfac      	ite	ge
 8002bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bba:	81a3      	strhlt	r3, [r4, #12]
 8002bbc:	bd10      	pop	{r4, pc}

08002bbe <__swrite>:
 8002bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc2:	461f      	mov	r7, r3
 8002bc4:	898b      	ldrh	r3, [r1, #12]
 8002bc6:	05db      	lsls	r3, r3, #23
 8002bc8:	4605      	mov	r5, r0
 8002bca:	460c      	mov	r4, r1
 8002bcc:	4616      	mov	r6, r2
 8002bce:	d505      	bpl.n	8002bdc <__swrite+0x1e>
 8002bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f000 f83c 	bl	8002c54 <_lseek_r>
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002be6:	81a3      	strh	r3, [r4, #12]
 8002be8:	4632      	mov	r2, r6
 8002bea:	463b      	mov	r3, r7
 8002bec:	4628      	mov	r0, r5
 8002bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf2:	f000 b853 	b.w	8002c9c <_write_r>

08002bf6 <__sseek>:
 8002bf6:	b510      	push	{r4, lr}
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bfe:	f000 f829 	bl	8002c54 <_lseek_r>
 8002c02:	1c43      	adds	r3, r0, #1
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	bf15      	itete	ne
 8002c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c12:	81a3      	strheq	r3, [r4, #12]
 8002c14:	bf18      	it	ne
 8002c16:	81a3      	strhne	r3, [r4, #12]
 8002c18:	bd10      	pop	{r4, pc}

08002c1a <__sclose>:
 8002c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c1e:	f000 b809 	b.w	8002c34 <_close_r>

08002c22 <memset>:
 8002c22:	4402      	add	r2, r0
 8002c24:	4603      	mov	r3, r0
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d100      	bne.n	8002c2c <memset+0xa>
 8002c2a:	4770      	bx	lr
 8002c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8002c30:	e7f9      	b.n	8002c26 <memset+0x4>
	...

08002c34 <_close_r>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4d06      	ldr	r5, [pc, #24]	; (8002c50 <_close_r+0x1c>)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	602b      	str	r3, [r5, #0]
 8002c40:	f7ff fe43 	bl	80028ca <_close>
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	d102      	bne.n	8002c4e <_close_r+0x1a>
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	b103      	cbz	r3, 8002c4e <_close_r+0x1a>
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
 8002c50:	20016d94 	.word	0x20016d94

08002c54 <_lseek_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4d07      	ldr	r5, [pc, #28]	; (8002c74 <_lseek_r+0x20>)
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	2200      	movs	r2, #0
 8002c60:	602a      	str	r2, [r5, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f7ff fe58 	bl	8002918 <_lseek>
 8002c68:	1c43      	adds	r3, r0, #1
 8002c6a:	d102      	bne.n	8002c72 <_lseek_r+0x1e>
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	b103      	cbz	r3, 8002c72 <_lseek_r+0x1e>
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	bd38      	pop	{r3, r4, r5, pc}
 8002c74:	20016d94 	.word	0x20016d94

08002c78 <_read_r>:
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4d07      	ldr	r5, [pc, #28]	; (8002c98 <_read_r+0x20>)
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	4608      	mov	r0, r1
 8002c80:	4611      	mov	r1, r2
 8002c82:	2200      	movs	r2, #0
 8002c84:	602a      	str	r2, [r5, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f7ff fde6 	bl	8002858 <_read>
 8002c8c:	1c43      	adds	r3, r0, #1
 8002c8e:	d102      	bne.n	8002c96 <_read_r+0x1e>
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	b103      	cbz	r3, 8002c96 <_read_r+0x1e>
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	20016d94 	.word	0x20016d94

08002c9c <_write_r>:
 8002c9c:	b538      	push	{r3, r4, r5, lr}
 8002c9e:	4d07      	ldr	r5, [pc, #28]	; (8002cbc <_write_r+0x20>)
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	4608      	mov	r0, r1
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	602a      	str	r2, [r5, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f7ff fdf1 	bl	8002892 <_write>
 8002cb0:	1c43      	adds	r3, r0, #1
 8002cb2:	d102      	bne.n	8002cba <_write_r+0x1e>
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	b103      	cbz	r3, 8002cba <_write_r+0x1e>
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
 8002cbc:	20016d94 	.word	0x20016d94

08002cc0 <__errno>:
 8002cc0:	4b01      	ldr	r3, [pc, #4]	; (8002cc8 <__errno+0x8>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	10000070 	.word	0x10000070

08002ccc <__libc_init_array>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4d0d      	ldr	r5, [pc, #52]	; (8002d04 <__libc_init_array+0x38>)
 8002cd0:	4c0d      	ldr	r4, [pc, #52]	; (8002d08 <__libc_init_array+0x3c>)
 8002cd2:	1b64      	subs	r4, r4, r5
 8002cd4:	10a4      	asrs	r4, r4, #2
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	42a6      	cmp	r6, r4
 8002cda:	d109      	bne.n	8002cf0 <__libc_init_array+0x24>
 8002cdc:	4d0b      	ldr	r5, [pc, #44]	; (8002d0c <__libc_init_array+0x40>)
 8002cde:	4c0c      	ldr	r4, [pc, #48]	; (8002d10 <__libc_init_array+0x44>)
 8002ce0:	f000 fdc0 	bl	8003864 <_init>
 8002ce4:	1b64      	subs	r4, r4, r5
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	2600      	movs	r6, #0
 8002cea:	42a6      	cmp	r6, r4
 8002cec:	d105      	bne.n	8002cfa <__libc_init_array+0x2e>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf4:	4798      	blx	r3
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7ee      	b.n	8002cd8 <__libc_init_array+0xc>
 8002cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfe:	4798      	blx	r3
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7f2      	b.n	8002cea <__libc_init_array+0x1e>
 8002d04:	08003a48 	.word	0x08003a48
 8002d08:	08003a48 	.word	0x08003a48
 8002d0c:	08003a48 	.word	0x08003a48
 8002d10:	08003a4c 	.word	0x08003a4c

08002d14 <__retarget_lock_init_recursive>:
 8002d14:	4770      	bx	lr

08002d16 <__retarget_lock_acquire_recursive>:
 8002d16:	4770      	bx	lr

08002d18 <__retarget_lock_release_recursive>:
 8002d18:	4770      	bx	lr
	...

08002d1c <_free_r>:
 8002d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d1e:	2900      	cmp	r1, #0
 8002d20:	d044      	beq.n	8002dac <_free_r+0x90>
 8002d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d26:	9001      	str	r0, [sp, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8002d2e:	bfb8      	it	lt
 8002d30:	18e4      	addlt	r4, r4, r3
 8002d32:	f000 f8df 	bl	8002ef4 <__malloc_lock>
 8002d36:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <_free_r+0x94>)
 8002d38:	9801      	ldr	r0, [sp, #4]
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	b933      	cbnz	r3, 8002d4c <_free_r+0x30>
 8002d3e:	6063      	str	r3, [r4, #4]
 8002d40:	6014      	str	r4, [r2, #0]
 8002d42:	b003      	add	sp, #12
 8002d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d48:	f000 b8da 	b.w	8002f00 <__malloc_unlock>
 8002d4c:	42a3      	cmp	r3, r4
 8002d4e:	d908      	bls.n	8002d62 <_free_r+0x46>
 8002d50:	6825      	ldr	r5, [r4, #0]
 8002d52:	1961      	adds	r1, r4, r5
 8002d54:	428b      	cmp	r3, r1
 8002d56:	bf01      	itttt	eq
 8002d58:	6819      	ldreq	r1, [r3, #0]
 8002d5a:	685b      	ldreq	r3, [r3, #4]
 8002d5c:	1949      	addeq	r1, r1, r5
 8002d5e:	6021      	streq	r1, [r4, #0]
 8002d60:	e7ed      	b.n	8002d3e <_free_r+0x22>
 8002d62:	461a      	mov	r2, r3
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	b10b      	cbz	r3, 8002d6c <_free_r+0x50>
 8002d68:	42a3      	cmp	r3, r4
 8002d6a:	d9fa      	bls.n	8002d62 <_free_r+0x46>
 8002d6c:	6811      	ldr	r1, [r2, #0]
 8002d6e:	1855      	adds	r5, r2, r1
 8002d70:	42a5      	cmp	r5, r4
 8002d72:	d10b      	bne.n	8002d8c <_free_r+0x70>
 8002d74:	6824      	ldr	r4, [r4, #0]
 8002d76:	4421      	add	r1, r4
 8002d78:	1854      	adds	r4, r2, r1
 8002d7a:	42a3      	cmp	r3, r4
 8002d7c:	6011      	str	r1, [r2, #0]
 8002d7e:	d1e0      	bne.n	8002d42 <_free_r+0x26>
 8002d80:	681c      	ldr	r4, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	6053      	str	r3, [r2, #4]
 8002d86:	440c      	add	r4, r1
 8002d88:	6014      	str	r4, [r2, #0]
 8002d8a:	e7da      	b.n	8002d42 <_free_r+0x26>
 8002d8c:	d902      	bls.n	8002d94 <_free_r+0x78>
 8002d8e:	230c      	movs	r3, #12
 8002d90:	6003      	str	r3, [r0, #0]
 8002d92:	e7d6      	b.n	8002d42 <_free_r+0x26>
 8002d94:	6825      	ldr	r5, [r4, #0]
 8002d96:	1961      	adds	r1, r4, r5
 8002d98:	428b      	cmp	r3, r1
 8002d9a:	bf04      	itt	eq
 8002d9c:	6819      	ldreq	r1, [r3, #0]
 8002d9e:	685b      	ldreq	r3, [r3, #4]
 8002da0:	6063      	str	r3, [r4, #4]
 8002da2:	bf04      	itt	eq
 8002da4:	1949      	addeq	r1, r1, r5
 8002da6:	6021      	streq	r1, [r4, #0]
 8002da8:	6054      	str	r4, [r2, #4]
 8002daa:	e7ca      	b.n	8002d42 <_free_r+0x26>
 8002dac:	b003      	add	sp, #12
 8002dae:	bd30      	pop	{r4, r5, pc}
 8002db0:	20016d9c 	.word	0x20016d9c

08002db4 <sbrk_aligned>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4e0e      	ldr	r6, [pc, #56]	; (8002df0 <sbrk_aligned+0x3c>)
 8002db8:	460c      	mov	r4, r1
 8002dba:	6831      	ldr	r1, [r6, #0]
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	b911      	cbnz	r1, 8002dc6 <sbrk_aligned+0x12>
 8002dc0:	f000 fcbc 	bl	800373c <_sbrk_r>
 8002dc4:	6030      	str	r0, [r6, #0]
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f000 fcb7 	bl	800373c <_sbrk_r>
 8002dce:	1c43      	adds	r3, r0, #1
 8002dd0:	d00a      	beq.n	8002de8 <sbrk_aligned+0x34>
 8002dd2:	1cc4      	adds	r4, r0, #3
 8002dd4:	f024 0403 	bic.w	r4, r4, #3
 8002dd8:	42a0      	cmp	r0, r4
 8002dda:	d007      	beq.n	8002dec <sbrk_aligned+0x38>
 8002ddc:	1a21      	subs	r1, r4, r0
 8002dde:	4628      	mov	r0, r5
 8002de0:	f000 fcac 	bl	800373c <_sbrk_r>
 8002de4:	3001      	adds	r0, #1
 8002de6:	d101      	bne.n	8002dec <sbrk_aligned+0x38>
 8002de8:	f04f 34ff 	mov.w	r4, #4294967295
 8002dec:	4620      	mov	r0, r4
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	20016da0 	.word	0x20016da0

08002df4 <_malloc_r>:
 8002df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df8:	1ccd      	adds	r5, r1, #3
 8002dfa:	f025 0503 	bic.w	r5, r5, #3
 8002dfe:	3508      	adds	r5, #8
 8002e00:	2d0c      	cmp	r5, #12
 8002e02:	bf38      	it	cc
 8002e04:	250c      	movcc	r5, #12
 8002e06:	2d00      	cmp	r5, #0
 8002e08:	4607      	mov	r7, r0
 8002e0a:	db01      	blt.n	8002e10 <_malloc_r+0x1c>
 8002e0c:	42a9      	cmp	r1, r5
 8002e0e:	d905      	bls.n	8002e1c <_malloc_r+0x28>
 8002e10:	230c      	movs	r3, #12
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	2600      	movs	r6, #0
 8002e16:	4630      	mov	r0, r6
 8002e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002ef0 <_malloc_r+0xfc>
 8002e20:	f000 f868 	bl	8002ef4 <__malloc_lock>
 8002e24:	f8d8 3000 	ldr.w	r3, [r8]
 8002e28:	461c      	mov	r4, r3
 8002e2a:	bb5c      	cbnz	r4, 8002e84 <_malloc_r+0x90>
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	4638      	mov	r0, r7
 8002e30:	f7ff ffc0 	bl	8002db4 <sbrk_aligned>
 8002e34:	1c43      	adds	r3, r0, #1
 8002e36:	4604      	mov	r4, r0
 8002e38:	d155      	bne.n	8002ee6 <_malloc_r+0xf2>
 8002e3a:	f8d8 4000 	ldr.w	r4, [r8]
 8002e3e:	4626      	mov	r6, r4
 8002e40:	2e00      	cmp	r6, #0
 8002e42:	d145      	bne.n	8002ed0 <_malloc_r+0xdc>
 8002e44:	2c00      	cmp	r4, #0
 8002e46:	d048      	beq.n	8002eda <_malloc_r+0xe6>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	4631      	mov	r1, r6
 8002e4c:	4638      	mov	r0, r7
 8002e4e:	eb04 0903 	add.w	r9, r4, r3
 8002e52:	f000 fc73 	bl	800373c <_sbrk_r>
 8002e56:	4581      	cmp	r9, r0
 8002e58:	d13f      	bne.n	8002eda <_malloc_r+0xe6>
 8002e5a:	6821      	ldr	r1, [r4, #0]
 8002e5c:	1a6d      	subs	r5, r5, r1
 8002e5e:	4629      	mov	r1, r5
 8002e60:	4638      	mov	r0, r7
 8002e62:	f7ff ffa7 	bl	8002db4 <sbrk_aligned>
 8002e66:	3001      	adds	r0, #1
 8002e68:	d037      	beq.n	8002eda <_malloc_r+0xe6>
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	442b      	add	r3, r5
 8002e6e:	6023      	str	r3, [r4, #0]
 8002e70:	f8d8 3000 	ldr.w	r3, [r8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d038      	beq.n	8002eea <_malloc_r+0xf6>
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	42a2      	cmp	r2, r4
 8002e7c:	d12b      	bne.n	8002ed6 <_malloc_r+0xe2>
 8002e7e:	2200      	movs	r2, #0
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	e00f      	b.n	8002ea4 <_malloc_r+0xb0>
 8002e84:	6822      	ldr	r2, [r4, #0]
 8002e86:	1b52      	subs	r2, r2, r5
 8002e88:	d41f      	bmi.n	8002eca <_malloc_r+0xd6>
 8002e8a:	2a0b      	cmp	r2, #11
 8002e8c:	d917      	bls.n	8002ebe <_malloc_r+0xca>
 8002e8e:	1961      	adds	r1, r4, r5
 8002e90:	42a3      	cmp	r3, r4
 8002e92:	6025      	str	r5, [r4, #0]
 8002e94:	bf18      	it	ne
 8002e96:	6059      	strne	r1, [r3, #4]
 8002e98:	6863      	ldr	r3, [r4, #4]
 8002e9a:	bf08      	it	eq
 8002e9c:	f8c8 1000 	streq.w	r1, [r8]
 8002ea0:	5162      	str	r2, [r4, r5]
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	f104 060b 	add.w	r6, r4, #11
 8002eaa:	f000 f829 	bl	8002f00 <__malloc_unlock>
 8002eae:	f026 0607 	bic.w	r6, r6, #7
 8002eb2:	1d23      	adds	r3, r4, #4
 8002eb4:	1af2      	subs	r2, r6, r3
 8002eb6:	d0ae      	beq.n	8002e16 <_malloc_r+0x22>
 8002eb8:	1b9b      	subs	r3, r3, r6
 8002eba:	50a3      	str	r3, [r4, r2]
 8002ebc:	e7ab      	b.n	8002e16 <_malloc_r+0x22>
 8002ebe:	42a3      	cmp	r3, r4
 8002ec0:	6862      	ldr	r2, [r4, #4]
 8002ec2:	d1dd      	bne.n	8002e80 <_malloc_r+0x8c>
 8002ec4:	f8c8 2000 	str.w	r2, [r8]
 8002ec8:	e7ec      	b.n	8002ea4 <_malloc_r+0xb0>
 8002eca:	4623      	mov	r3, r4
 8002ecc:	6864      	ldr	r4, [r4, #4]
 8002ece:	e7ac      	b.n	8002e2a <_malloc_r+0x36>
 8002ed0:	4634      	mov	r4, r6
 8002ed2:	6876      	ldr	r6, [r6, #4]
 8002ed4:	e7b4      	b.n	8002e40 <_malloc_r+0x4c>
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	e7cc      	b.n	8002e74 <_malloc_r+0x80>
 8002eda:	230c      	movs	r3, #12
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4638      	mov	r0, r7
 8002ee0:	f000 f80e 	bl	8002f00 <__malloc_unlock>
 8002ee4:	e797      	b.n	8002e16 <_malloc_r+0x22>
 8002ee6:	6025      	str	r5, [r4, #0]
 8002ee8:	e7dc      	b.n	8002ea4 <_malloc_r+0xb0>
 8002eea:	605b      	str	r3, [r3, #4]
 8002eec:	deff      	udf	#255	; 0xff
 8002eee:	bf00      	nop
 8002ef0:	20016d9c 	.word	0x20016d9c

08002ef4 <__malloc_lock>:
 8002ef4:	4801      	ldr	r0, [pc, #4]	; (8002efc <__malloc_lock+0x8>)
 8002ef6:	f7ff bf0e 	b.w	8002d16 <__retarget_lock_acquire_recursive>
 8002efa:	bf00      	nop
 8002efc:	20016d98 	.word	0x20016d98

08002f00 <__malloc_unlock>:
 8002f00:	4801      	ldr	r0, [pc, #4]	; (8002f08 <__malloc_unlock+0x8>)
 8002f02:	f7ff bf09 	b.w	8002d18 <__retarget_lock_release_recursive>
 8002f06:	bf00      	nop
 8002f08:	20016d98 	.word	0x20016d98

08002f0c <__sfputc_r>:
 8002f0c:	6893      	ldr	r3, [r2, #8]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	b410      	push	{r4}
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	da08      	bge.n	8002f2a <__sfputc_r+0x1e>
 8002f18:	6994      	ldr	r4, [r2, #24]
 8002f1a:	42a3      	cmp	r3, r4
 8002f1c:	db01      	blt.n	8002f22 <__sfputc_r+0x16>
 8002f1e:	290a      	cmp	r1, #10
 8002f20:	d103      	bne.n	8002f2a <__sfputc_r+0x1e>
 8002f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f26:	f000 bb73 	b.w	8003610 <__swbuf_r>
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	1c58      	adds	r0, r3, #1
 8002f2e:	6010      	str	r0, [r2, #0]
 8002f30:	7019      	strb	r1, [r3, #0]
 8002f32:	4608      	mov	r0, r1
 8002f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <__sfputs_r>:
 8002f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3c:	4606      	mov	r6, r0
 8002f3e:	460f      	mov	r7, r1
 8002f40:	4614      	mov	r4, r2
 8002f42:	18d5      	adds	r5, r2, r3
 8002f44:	42ac      	cmp	r4, r5
 8002f46:	d101      	bne.n	8002f4c <__sfputs_r+0x12>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e007      	b.n	8002f5c <__sfputs_r+0x22>
 8002f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f50:	463a      	mov	r2, r7
 8002f52:	4630      	mov	r0, r6
 8002f54:	f7ff ffda 	bl	8002f0c <__sfputc_r>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d1f3      	bne.n	8002f44 <__sfputs_r+0xa>
 8002f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f60 <_vfiprintf_r>:
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	460d      	mov	r5, r1
 8002f66:	b09d      	sub	sp, #116	; 0x74
 8002f68:	4614      	mov	r4, r2
 8002f6a:	4698      	mov	r8, r3
 8002f6c:	4606      	mov	r6, r0
 8002f6e:	b118      	cbz	r0, 8002f78 <_vfiprintf_r+0x18>
 8002f70:	6a03      	ldr	r3, [r0, #32]
 8002f72:	b90b      	cbnz	r3, 8002f78 <_vfiprintf_r+0x18>
 8002f74:	f7ff fdca 	bl	8002b0c <__sinit>
 8002f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f7a:	07d9      	lsls	r1, r3, #31
 8002f7c:	d405      	bmi.n	8002f8a <_vfiprintf_r+0x2a>
 8002f7e:	89ab      	ldrh	r3, [r5, #12]
 8002f80:	059a      	lsls	r2, r3, #22
 8002f82:	d402      	bmi.n	8002f8a <_vfiprintf_r+0x2a>
 8002f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f86:	f7ff fec6 	bl	8002d16 <__retarget_lock_acquire_recursive>
 8002f8a:	89ab      	ldrh	r3, [r5, #12]
 8002f8c:	071b      	lsls	r3, r3, #28
 8002f8e:	d501      	bpl.n	8002f94 <_vfiprintf_r+0x34>
 8002f90:	692b      	ldr	r3, [r5, #16]
 8002f92:	b99b      	cbnz	r3, 8002fbc <_vfiprintf_r+0x5c>
 8002f94:	4629      	mov	r1, r5
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 fb78 	bl	800368c <__swsetup_r>
 8002f9c:	b170      	cbz	r0, 8002fbc <_vfiprintf_r+0x5c>
 8002f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fa0:	07dc      	lsls	r4, r3, #31
 8002fa2:	d504      	bpl.n	8002fae <_vfiprintf_r+0x4e>
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	b01d      	add	sp, #116	; 0x74
 8002faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fae:	89ab      	ldrh	r3, [r5, #12]
 8002fb0:	0598      	lsls	r0, r3, #22
 8002fb2:	d4f7      	bmi.n	8002fa4 <_vfiprintf_r+0x44>
 8002fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fb6:	f7ff feaf 	bl	8002d18 <__retarget_lock_release_recursive>
 8002fba:	e7f3      	b.n	8002fa4 <_vfiprintf_r+0x44>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fca:	2330      	movs	r3, #48	; 0x30
 8002fcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003180 <_vfiprintf_r+0x220>
 8002fd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fd4:	f04f 0901 	mov.w	r9, #1
 8002fd8:	4623      	mov	r3, r4
 8002fda:	469a      	mov	sl, r3
 8002fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fe0:	b10a      	cbz	r2, 8002fe6 <_vfiprintf_r+0x86>
 8002fe2:	2a25      	cmp	r2, #37	; 0x25
 8002fe4:	d1f9      	bne.n	8002fda <_vfiprintf_r+0x7a>
 8002fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8002fea:	d00b      	beq.n	8003004 <_vfiprintf_r+0xa4>
 8002fec:	465b      	mov	r3, fp
 8002fee:	4622      	mov	r2, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7ff ffa1 	bl	8002f3a <__sfputs_r>
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	f000 80a9 	beq.w	8003150 <_vfiprintf_r+0x1f0>
 8002ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003000:	445a      	add	r2, fp
 8003002:	9209      	str	r2, [sp, #36]	; 0x24
 8003004:	f89a 3000 	ldrb.w	r3, [sl]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a1 	beq.w	8003150 <_vfiprintf_r+0x1f0>
 800300e:	2300      	movs	r3, #0
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003018:	f10a 0a01 	add.w	sl, sl, #1
 800301c:	9304      	str	r3, [sp, #16]
 800301e:	9307      	str	r3, [sp, #28]
 8003020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003024:	931a      	str	r3, [sp, #104]	; 0x68
 8003026:	4654      	mov	r4, sl
 8003028:	2205      	movs	r2, #5
 800302a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302e:	4854      	ldr	r0, [pc, #336]	; (8003180 <_vfiprintf_r+0x220>)
 8003030:	f7fd f8ce 	bl	80001d0 <memchr>
 8003034:	9a04      	ldr	r2, [sp, #16]
 8003036:	b9d8      	cbnz	r0, 8003070 <_vfiprintf_r+0x110>
 8003038:	06d1      	lsls	r1, r2, #27
 800303a:	bf44      	itt	mi
 800303c:	2320      	movmi	r3, #32
 800303e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003042:	0713      	lsls	r3, r2, #28
 8003044:	bf44      	itt	mi
 8003046:	232b      	movmi	r3, #43	; 0x2b
 8003048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800304c:	f89a 3000 	ldrb.w	r3, [sl]
 8003050:	2b2a      	cmp	r3, #42	; 0x2a
 8003052:	d015      	beq.n	8003080 <_vfiprintf_r+0x120>
 8003054:	9a07      	ldr	r2, [sp, #28]
 8003056:	4654      	mov	r4, sl
 8003058:	2000      	movs	r0, #0
 800305a:	f04f 0c0a 	mov.w	ip, #10
 800305e:	4621      	mov	r1, r4
 8003060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003064:	3b30      	subs	r3, #48	; 0x30
 8003066:	2b09      	cmp	r3, #9
 8003068:	d94d      	bls.n	8003106 <_vfiprintf_r+0x1a6>
 800306a:	b1b0      	cbz	r0, 800309a <_vfiprintf_r+0x13a>
 800306c:	9207      	str	r2, [sp, #28]
 800306e:	e014      	b.n	800309a <_vfiprintf_r+0x13a>
 8003070:	eba0 0308 	sub.w	r3, r0, r8
 8003074:	fa09 f303 	lsl.w	r3, r9, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	9304      	str	r3, [sp, #16]
 800307c:	46a2      	mov	sl, r4
 800307e:	e7d2      	b.n	8003026 <_vfiprintf_r+0xc6>
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	1d19      	adds	r1, r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	9103      	str	r1, [sp, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	bfbb      	ittet	lt
 800308c:	425b      	neglt	r3, r3
 800308e:	f042 0202 	orrlt.w	r2, r2, #2
 8003092:	9307      	strge	r3, [sp, #28]
 8003094:	9307      	strlt	r3, [sp, #28]
 8003096:	bfb8      	it	lt
 8003098:	9204      	strlt	r2, [sp, #16]
 800309a:	7823      	ldrb	r3, [r4, #0]
 800309c:	2b2e      	cmp	r3, #46	; 0x2e
 800309e:	d10c      	bne.n	80030ba <_vfiprintf_r+0x15a>
 80030a0:	7863      	ldrb	r3, [r4, #1]
 80030a2:	2b2a      	cmp	r3, #42	; 0x2a
 80030a4:	d134      	bne.n	8003110 <_vfiprintf_r+0x1b0>
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	9203      	str	r2, [sp, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bfb8      	it	lt
 80030b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80030b6:	3402      	adds	r4, #2
 80030b8:	9305      	str	r3, [sp, #20]
 80030ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003190 <_vfiprintf_r+0x230>
 80030be:	7821      	ldrb	r1, [r4, #0]
 80030c0:	2203      	movs	r2, #3
 80030c2:	4650      	mov	r0, sl
 80030c4:	f7fd f884 	bl	80001d0 <memchr>
 80030c8:	b138      	cbz	r0, 80030da <_vfiprintf_r+0x17a>
 80030ca:	9b04      	ldr	r3, [sp, #16]
 80030cc:	eba0 000a 	sub.w	r0, r0, sl
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	4082      	lsls	r2, r0
 80030d4:	4313      	orrs	r3, r2
 80030d6:	3401      	adds	r4, #1
 80030d8:	9304      	str	r3, [sp, #16]
 80030da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030de:	4829      	ldr	r0, [pc, #164]	; (8003184 <_vfiprintf_r+0x224>)
 80030e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030e4:	2206      	movs	r2, #6
 80030e6:	f7fd f873 	bl	80001d0 <memchr>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d03f      	beq.n	800316e <_vfiprintf_r+0x20e>
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <_vfiprintf_r+0x228>)
 80030f0:	bb1b      	cbnz	r3, 800313a <_vfiprintf_r+0x1da>
 80030f2:	9b03      	ldr	r3, [sp, #12]
 80030f4:	3307      	adds	r3, #7
 80030f6:	f023 0307 	bic.w	r3, r3, #7
 80030fa:	3308      	adds	r3, #8
 80030fc:	9303      	str	r3, [sp, #12]
 80030fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003100:	443b      	add	r3, r7
 8003102:	9309      	str	r3, [sp, #36]	; 0x24
 8003104:	e768      	b.n	8002fd8 <_vfiprintf_r+0x78>
 8003106:	fb0c 3202 	mla	r2, ip, r2, r3
 800310a:	460c      	mov	r4, r1
 800310c:	2001      	movs	r0, #1
 800310e:	e7a6      	b.n	800305e <_vfiprintf_r+0xfe>
 8003110:	2300      	movs	r3, #0
 8003112:	3401      	adds	r4, #1
 8003114:	9305      	str	r3, [sp, #20]
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 0c0a 	mov.w	ip, #10
 800311c:	4620      	mov	r0, r4
 800311e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003122:	3a30      	subs	r2, #48	; 0x30
 8003124:	2a09      	cmp	r2, #9
 8003126:	d903      	bls.n	8003130 <_vfiprintf_r+0x1d0>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0c6      	beq.n	80030ba <_vfiprintf_r+0x15a>
 800312c:	9105      	str	r1, [sp, #20]
 800312e:	e7c4      	b.n	80030ba <_vfiprintf_r+0x15a>
 8003130:	fb0c 2101 	mla	r1, ip, r1, r2
 8003134:	4604      	mov	r4, r0
 8003136:	2301      	movs	r3, #1
 8003138:	e7f0      	b.n	800311c <_vfiprintf_r+0x1bc>
 800313a:	ab03      	add	r3, sp, #12
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462a      	mov	r2, r5
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <_vfiprintf_r+0x22c>)
 8003142:	a904      	add	r1, sp, #16
 8003144:	4630      	mov	r0, r6
 8003146:	f3af 8000 	nop.w
 800314a:	4607      	mov	r7, r0
 800314c:	1c78      	adds	r0, r7, #1
 800314e:	d1d6      	bne.n	80030fe <_vfiprintf_r+0x19e>
 8003150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003152:	07d9      	lsls	r1, r3, #31
 8003154:	d405      	bmi.n	8003162 <_vfiprintf_r+0x202>
 8003156:	89ab      	ldrh	r3, [r5, #12]
 8003158:	059a      	lsls	r2, r3, #22
 800315a:	d402      	bmi.n	8003162 <_vfiprintf_r+0x202>
 800315c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800315e:	f7ff fddb 	bl	8002d18 <__retarget_lock_release_recursive>
 8003162:	89ab      	ldrh	r3, [r5, #12]
 8003164:	065b      	lsls	r3, r3, #25
 8003166:	f53f af1d 	bmi.w	8002fa4 <_vfiprintf_r+0x44>
 800316a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800316c:	e71c      	b.n	8002fa8 <_vfiprintf_r+0x48>
 800316e:	ab03      	add	r3, sp, #12
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	462a      	mov	r2, r5
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <_vfiprintf_r+0x22c>)
 8003176:	a904      	add	r1, sp, #16
 8003178:	4630      	mov	r0, r6
 800317a:	f000 f879 	bl	8003270 <_printf_i>
 800317e:	e7e4      	b.n	800314a <_vfiprintf_r+0x1ea>
 8003180:	08003a0a 	.word	0x08003a0a
 8003184:	08003a14 	.word	0x08003a14
 8003188:	00000000 	.word	0x00000000
 800318c:	08002f3b 	.word	0x08002f3b
 8003190:	08003a10 	.word	0x08003a10

08003194 <_printf_common>:
 8003194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003198:	4616      	mov	r6, r2
 800319a:	4699      	mov	r9, r3
 800319c:	688a      	ldr	r2, [r1, #8]
 800319e:	690b      	ldr	r3, [r1, #16]
 80031a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bfb8      	it	lt
 80031a8:	4613      	movlt	r3, r2
 80031aa:	6033      	str	r3, [r6, #0]
 80031ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031b0:	4607      	mov	r7, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	b10a      	cbz	r2, 80031ba <_printf_common+0x26>
 80031b6:	3301      	adds	r3, #1
 80031b8:	6033      	str	r3, [r6, #0]
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	0699      	lsls	r1, r3, #26
 80031be:	bf42      	ittt	mi
 80031c0:	6833      	ldrmi	r3, [r6, #0]
 80031c2:	3302      	addmi	r3, #2
 80031c4:	6033      	strmi	r3, [r6, #0]
 80031c6:	6825      	ldr	r5, [r4, #0]
 80031c8:	f015 0506 	ands.w	r5, r5, #6
 80031cc:	d106      	bne.n	80031dc <_printf_common+0x48>
 80031ce:	f104 0a19 	add.w	sl, r4, #25
 80031d2:	68e3      	ldr	r3, [r4, #12]
 80031d4:	6832      	ldr	r2, [r6, #0]
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	42ab      	cmp	r3, r5
 80031da:	dc26      	bgt.n	800322a <_printf_common+0x96>
 80031dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031e0:	1e13      	subs	r3, r2, #0
 80031e2:	6822      	ldr	r2, [r4, #0]
 80031e4:	bf18      	it	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	0692      	lsls	r2, r2, #26
 80031ea:	d42b      	bmi.n	8003244 <_printf_common+0xb0>
 80031ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031f0:	4649      	mov	r1, r9
 80031f2:	4638      	mov	r0, r7
 80031f4:	47c0      	blx	r8
 80031f6:	3001      	adds	r0, #1
 80031f8:	d01e      	beq.n	8003238 <_printf_common+0xa4>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	6922      	ldr	r2, [r4, #16]
 80031fe:	f003 0306 	and.w	r3, r3, #6
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf02      	ittt	eq
 8003206:	68e5      	ldreq	r5, [r4, #12]
 8003208:	6833      	ldreq	r3, [r6, #0]
 800320a:	1aed      	subeq	r5, r5, r3
 800320c:	68a3      	ldr	r3, [r4, #8]
 800320e:	bf0c      	ite	eq
 8003210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003214:	2500      	movne	r5, #0
 8003216:	4293      	cmp	r3, r2
 8003218:	bfc4      	itt	gt
 800321a:	1a9b      	subgt	r3, r3, r2
 800321c:	18ed      	addgt	r5, r5, r3
 800321e:	2600      	movs	r6, #0
 8003220:	341a      	adds	r4, #26
 8003222:	42b5      	cmp	r5, r6
 8003224:	d11a      	bne.n	800325c <_printf_common+0xc8>
 8003226:	2000      	movs	r0, #0
 8003228:	e008      	b.n	800323c <_printf_common+0xa8>
 800322a:	2301      	movs	r3, #1
 800322c:	4652      	mov	r2, sl
 800322e:	4649      	mov	r1, r9
 8003230:	4638      	mov	r0, r7
 8003232:	47c0      	blx	r8
 8003234:	3001      	adds	r0, #1
 8003236:	d103      	bne.n	8003240 <_printf_common+0xac>
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003240:	3501      	adds	r5, #1
 8003242:	e7c6      	b.n	80031d2 <_printf_common+0x3e>
 8003244:	18e1      	adds	r1, r4, r3
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	2030      	movs	r0, #48	; 0x30
 800324a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800324e:	4422      	add	r2, r4
 8003250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003258:	3302      	adds	r3, #2
 800325a:	e7c7      	b.n	80031ec <_printf_common+0x58>
 800325c:	2301      	movs	r3, #1
 800325e:	4622      	mov	r2, r4
 8003260:	4649      	mov	r1, r9
 8003262:	4638      	mov	r0, r7
 8003264:	47c0      	blx	r8
 8003266:	3001      	adds	r0, #1
 8003268:	d0e6      	beq.n	8003238 <_printf_common+0xa4>
 800326a:	3601      	adds	r6, #1
 800326c:	e7d9      	b.n	8003222 <_printf_common+0x8e>
	...

08003270 <_printf_i>:
 8003270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003274:	7e0f      	ldrb	r7, [r1, #24]
 8003276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003278:	2f78      	cmp	r7, #120	; 0x78
 800327a:	4691      	mov	r9, r2
 800327c:	4680      	mov	r8, r0
 800327e:	460c      	mov	r4, r1
 8003280:	469a      	mov	sl, r3
 8003282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003286:	d807      	bhi.n	8003298 <_printf_i+0x28>
 8003288:	2f62      	cmp	r7, #98	; 0x62
 800328a:	d80a      	bhi.n	80032a2 <_printf_i+0x32>
 800328c:	2f00      	cmp	r7, #0
 800328e:	f000 80d4 	beq.w	800343a <_printf_i+0x1ca>
 8003292:	2f58      	cmp	r7, #88	; 0x58
 8003294:	f000 80c0 	beq.w	8003418 <_printf_i+0x1a8>
 8003298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800329c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032a0:	e03a      	b.n	8003318 <_printf_i+0xa8>
 80032a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032a6:	2b15      	cmp	r3, #21
 80032a8:	d8f6      	bhi.n	8003298 <_printf_i+0x28>
 80032aa:	a101      	add	r1, pc, #4	; (adr r1, 80032b0 <_printf_i+0x40>)
 80032ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032b0:	08003309 	.word	0x08003309
 80032b4:	0800331d 	.word	0x0800331d
 80032b8:	08003299 	.word	0x08003299
 80032bc:	08003299 	.word	0x08003299
 80032c0:	08003299 	.word	0x08003299
 80032c4:	08003299 	.word	0x08003299
 80032c8:	0800331d 	.word	0x0800331d
 80032cc:	08003299 	.word	0x08003299
 80032d0:	08003299 	.word	0x08003299
 80032d4:	08003299 	.word	0x08003299
 80032d8:	08003299 	.word	0x08003299
 80032dc:	08003421 	.word	0x08003421
 80032e0:	08003349 	.word	0x08003349
 80032e4:	080033db 	.word	0x080033db
 80032e8:	08003299 	.word	0x08003299
 80032ec:	08003299 	.word	0x08003299
 80032f0:	08003443 	.word	0x08003443
 80032f4:	08003299 	.word	0x08003299
 80032f8:	08003349 	.word	0x08003349
 80032fc:	08003299 	.word	0x08003299
 8003300:	08003299 	.word	0x08003299
 8003304:	080033e3 	.word	0x080033e3
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	1d1a      	adds	r2, r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	602a      	str	r2, [r5, #0]
 8003310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003318:	2301      	movs	r3, #1
 800331a:	e09f      	b.n	800345c <_printf_i+0x1ec>
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	682b      	ldr	r3, [r5, #0]
 8003320:	0607      	lsls	r7, r0, #24
 8003322:	f103 0104 	add.w	r1, r3, #4
 8003326:	6029      	str	r1, [r5, #0]
 8003328:	d501      	bpl.n	800332e <_printf_i+0xbe>
 800332a:	681e      	ldr	r6, [r3, #0]
 800332c:	e003      	b.n	8003336 <_printf_i+0xc6>
 800332e:	0646      	lsls	r6, r0, #25
 8003330:	d5fb      	bpl.n	800332a <_printf_i+0xba>
 8003332:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003336:	2e00      	cmp	r6, #0
 8003338:	da03      	bge.n	8003342 <_printf_i+0xd2>
 800333a:	232d      	movs	r3, #45	; 0x2d
 800333c:	4276      	negs	r6, r6
 800333e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003342:	485a      	ldr	r0, [pc, #360]	; (80034ac <_printf_i+0x23c>)
 8003344:	230a      	movs	r3, #10
 8003346:	e012      	b.n	800336e <_printf_i+0xfe>
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	6820      	ldr	r0, [r4, #0]
 800334c:	1d19      	adds	r1, r3, #4
 800334e:	6029      	str	r1, [r5, #0]
 8003350:	0605      	lsls	r5, r0, #24
 8003352:	d501      	bpl.n	8003358 <_printf_i+0xe8>
 8003354:	681e      	ldr	r6, [r3, #0]
 8003356:	e002      	b.n	800335e <_printf_i+0xee>
 8003358:	0641      	lsls	r1, r0, #25
 800335a:	d5fb      	bpl.n	8003354 <_printf_i+0xe4>
 800335c:	881e      	ldrh	r6, [r3, #0]
 800335e:	4853      	ldr	r0, [pc, #332]	; (80034ac <_printf_i+0x23c>)
 8003360:	2f6f      	cmp	r7, #111	; 0x6f
 8003362:	bf0c      	ite	eq
 8003364:	2308      	moveq	r3, #8
 8003366:	230a      	movne	r3, #10
 8003368:	2100      	movs	r1, #0
 800336a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800336e:	6865      	ldr	r5, [r4, #4]
 8003370:	60a5      	str	r5, [r4, #8]
 8003372:	2d00      	cmp	r5, #0
 8003374:	bfa2      	ittt	ge
 8003376:	6821      	ldrge	r1, [r4, #0]
 8003378:	f021 0104 	bicge.w	r1, r1, #4
 800337c:	6021      	strge	r1, [r4, #0]
 800337e:	b90e      	cbnz	r6, 8003384 <_printf_i+0x114>
 8003380:	2d00      	cmp	r5, #0
 8003382:	d04b      	beq.n	800341c <_printf_i+0x1ac>
 8003384:	4615      	mov	r5, r2
 8003386:	fbb6 f1f3 	udiv	r1, r6, r3
 800338a:	fb03 6711 	mls	r7, r3, r1, r6
 800338e:	5dc7      	ldrb	r7, [r0, r7]
 8003390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003394:	4637      	mov	r7, r6
 8003396:	42bb      	cmp	r3, r7
 8003398:	460e      	mov	r6, r1
 800339a:	d9f4      	bls.n	8003386 <_printf_i+0x116>
 800339c:	2b08      	cmp	r3, #8
 800339e:	d10b      	bne.n	80033b8 <_printf_i+0x148>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	07de      	lsls	r6, r3, #31
 80033a4:	d508      	bpl.n	80033b8 <_printf_i+0x148>
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	6861      	ldr	r1, [r4, #4]
 80033aa:	4299      	cmp	r1, r3
 80033ac:	bfde      	ittt	le
 80033ae:	2330      	movle	r3, #48	; 0x30
 80033b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033b8:	1b52      	subs	r2, r2, r5
 80033ba:	6122      	str	r2, [r4, #16]
 80033bc:	f8cd a000 	str.w	sl, [sp]
 80033c0:	464b      	mov	r3, r9
 80033c2:	aa03      	add	r2, sp, #12
 80033c4:	4621      	mov	r1, r4
 80033c6:	4640      	mov	r0, r8
 80033c8:	f7ff fee4 	bl	8003194 <_printf_common>
 80033cc:	3001      	adds	r0, #1
 80033ce:	d14a      	bne.n	8003466 <_printf_i+0x1f6>
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	b004      	add	sp, #16
 80033d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	f043 0320 	orr.w	r3, r3, #32
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	4833      	ldr	r0, [pc, #204]	; (80034b0 <_printf_i+0x240>)
 80033e4:	2778      	movs	r7, #120	; 0x78
 80033e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	6829      	ldr	r1, [r5, #0]
 80033ee:	061f      	lsls	r7, r3, #24
 80033f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80033f4:	d402      	bmi.n	80033fc <_printf_i+0x18c>
 80033f6:	065f      	lsls	r7, r3, #25
 80033f8:	bf48      	it	mi
 80033fa:	b2b6      	uxthmi	r6, r6
 80033fc:	07df      	lsls	r7, r3, #31
 80033fe:	bf48      	it	mi
 8003400:	f043 0320 	orrmi.w	r3, r3, #32
 8003404:	6029      	str	r1, [r5, #0]
 8003406:	bf48      	it	mi
 8003408:	6023      	strmi	r3, [r4, #0]
 800340a:	b91e      	cbnz	r6, 8003414 <_printf_i+0x1a4>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f023 0320 	bic.w	r3, r3, #32
 8003412:	6023      	str	r3, [r4, #0]
 8003414:	2310      	movs	r3, #16
 8003416:	e7a7      	b.n	8003368 <_printf_i+0xf8>
 8003418:	4824      	ldr	r0, [pc, #144]	; (80034ac <_printf_i+0x23c>)
 800341a:	e7e4      	b.n	80033e6 <_printf_i+0x176>
 800341c:	4615      	mov	r5, r2
 800341e:	e7bd      	b.n	800339c <_printf_i+0x12c>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	6826      	ldr	r6, [r4, #0]
 8003424:	6961      	ldr	r1, [r4, #20]
 8003426:	1d18      	adds	r0, r3, #4
 8003428:	6028      	str	r0, [r5, #0]
 800342a:	0635      	lsls	r5, r6, #24
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	d501      	bpl.n	8003434 <_printf_i+0x1c4>
 8003430:	6019      	str	r1, [r3, #0]
 8003432:	e002      	b.n	800343a <_printf_i+0x1ca>
 8003434:	0670      	lsls	r0, r6, #25
 8003436:	d5fb      	bpl.n	8003430 <_printf_i+0x1c0>
 8003438:	8019      	strh	r1, [r3, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	6123      	str	r3, [r4, #16]
 800343e:	4615      	mov	r5, r2
 8003440:	e7bc      	b.n	80033bc <_printf_i+0x14c>
 8003442:	682b      	ldr	r3, [r5, #0]
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	602a      	str	r2, [r5, #0]
 8003448:	681d      	ldr	r5, [r3, #0]
 800344a:	6862      	ldr	r2, [r4, #4]
 800344c:	2100      	movs	r1, #0
 800344e:	4628      	mov	r0, r5
 8003450:	f7fc febe 	bl	80001d0 <memchr>
 8003454:	b108      	cbz	r0, 800345a <_printf_i+0x1ea>
 8003456:	1b40      	subs	r0, r0, r5
 8003458:	6060      	str	r0, [r4, #4]
 800345a:	6863      	ldr	r3, [r4, #4]
 800345c:	6123      	str	r3, [r4, #16]
 800345e:	2300      	movs	r3, #0
 8003460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003464:	e7aa      	b.n	80033bc <_printf_i+0x14c>
 8003466:	6923      	ldr	r3, [r4, #16]
 8003468:	462a      	mov	r2, r5
 800346a:	4649      	mov	r1, r9
 800346c:	4640      	mov	r0, r8
 800346e:	47d0      	blx	sl
 8003470:	3001      	adds	r0, #1
 8003472:	d0ad      	beq.n	80033d0 <_printf_i+0x160>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	079b      	lsls	r3, r3, #30
 8003478:	d413      	bmi.n	80034a2 <_printf_i+0x232>
 800347a:	68e0      	ldr	r0, [r4, #12]
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	4298      	cmp	r0, r3
 8003480:	bfb8      	it	lt
 8003482:	4618      	movlt	r0, r3
 8003484:	e7a6      	b.n	80033d4 <_printf_i+0x164>
 8003486:	2301      	movs	r3, #1
 8003488:	4632      	mov	r2, r6
 800348a:	4649      	mov	r1, r9
 800348c:	4640      	mov	r0, r8
 800348e:	47d0      	blx	sl
 8003490:	3001      	adds	r0, #1
 8003492:	d09d      	beq.n	80033d0 <_printf_i+0x160>
 8003494:	3501      	adds	r5, #1
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	9903      	ldr	r1, [sp, #12]
 800349a:	1a5b      	subs	r3, r3, r1
 800349c:	42ab      	cmp	r3, r5
 800349e:	dcf2      	bgt.n	8003486 <_printf_i+0x216>
 80034a0:	e7eb      	b.n	800347a <_printf_i+0x20a>
 80034a2:	2500      	movs	r5, #0
 80034a4:	f104 0619 	add.w	r6, r4, #25
 80034a8:	e7f5      	b.n	8003496 <_printf_i+0x226>
 80034aa:	bf00      	nop
 80034ac:	08003a1b 	.word	0x08003a1b
 80034b0:	08003a2c 	.word	0x08003a2c

080034b4 <__sflush_r>:
 80034b4:	898a      	ldrh	r2, [r1, #12]
 80034b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ba:	4605      	mov	r5, r0
 80034bc:	0710      	lsls	r0, r2, #28
 80034be:	460c      	mov	r4, r1
 80034c0:	d458      	bmi.n	8003574 <__sflush_r+0xc0>
 80034c2:	684b      	ldr	r3, [r1, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	dc05      	bgt.n	80034d4 <__sflush_r+0x20>
 80034c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	dc02      	bgt.n	80034d4 <__sflush_r+0x20>
 80034ce:	2000      	movs	r0, #0
 80034d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	d0f9      	beq.n	80034ce <__sflush_r+0x1a>
 80034da:	2300      	movs	r3, #0
 80034dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034e0:	682f      	ldr	r7, [r5, #0]
 80034e2:	6a21      	ldr	r1, [r4, #32]
 80034e4:	602b      	str	r3, [r5, #0]
 80034e6:	d032      	beq.n	800354e <__sflush_r+0x9a>
 80034e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	075a      	lsls	r2, r3, #29
 80034ee:	d505      	bpl.n	80034fc <__sflush_r+0x48>
 80034f0:	6863      	ldr	r3, [r4, #4]
 80034f2:	1ac0      	subs	r0, r0, r3
 80034f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034f6:	b10b      	cbz	r3, 80034fc <__sflush_r+0x48>
 80034f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034fa:	1ac0      	subs	r0, r0, r3
 80034fc:	2300      	movs	r3, #0
 80034fe:	4602      	mov	r2, r0
 8003500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003502:	6a21      	ldr	r1, [r4, #32]
 8003504:	4628      	mov	r0, r5
 8003506:	47b0      	blx	r6
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	d106      	bne.n	800351c <__sflush_r+0x68>
 800350e:	6829      	ldr	r1, [r5, #0]
 8003510:	291d      	cmp	r1, #29
 8003512:	d82b      	bhi.n	800356c <__sflush_r+0xb8>
 8003514:	4a29      	ldr	r2, [pc, #164]	; (80035bc <__sflush_r+0x108>)
 8003516:	410a      	asrs	r2, r1
 8003518:	07d6      	lsls	r6, r2, #31
 800351a:	d427      	bmi.n	800356c <__sflush_r+0xb8>
 800351c:	2200      	movs	r2, #0
 800351e:	6062      	str	r2, [r4, #4]
 8003520:	04d9      	lsls	r1, r3, #19
 8003522:	6922      	ldr	r2, [r4, #16]
 8003524:	6022      	str	r2, [r4, #0]
 8003526:	d504      	bpl.n	8003532 <__sflush_r+0x7e>
 8003528:	1c42      	adds	r2, r0, #1
 800352a:	d101      	bne.n	8003530 <__sflush_r+0x7c>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b903      	cbnz	r3, 8003532 <__sflush_r+0x7e>
 8003530:	6560      	str	r0, [r4, #84]	; 0x54
 8003532:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003534:	602f      	str	r7, [r5, #0]
 8003536:	2900      	cmp	r1, #0
 8003538:	d0c9      	beq.n	80034ce <__sflush_r+0x1a>
 800353a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800353e:	4299      	cmp	r1, r3
 8003540:	d002      	beq.n	8003548 <__sflush_r+0x94>
 8003542:	4628      	mov	r0, r5
 8003544:	f7ff fbea 	bl	8002d1c <_free_r>
 8003548:	2000      	movs	r0, #0
 800354a:	6360      	str	r0, [r4, #52]	; 0x34
 800354c:	e7c0      	b.n	80034d0 <__sflush_r+0x1c>
 800354e:	2301      	movs	r3, #1
 8003550:	4628      	mov	r0, r5
 8003552:	47b0      	blx	r6
 8003554:	1c41      	adds	r1, r0, #1
 8003556:	d1c8      	bne.n	80034ea <__sflush_r+0x36>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0c5      	beq.n	80034ea <__sflush_r+0x36>
 800355e:	2b1d      	cmp	r3, #29
 8003560:	d001      	beq.n	8003566 <__sflush_r+0xb2>
 8003562:	2b16      	cmp	r3, #22
 8003564:	d101      	bne.n	800356a <__sflush_r+0xb6>
 8003566:	602f      	str	r7, [r5, #0]
 8003568:	e7b1      	b.n	80034ce <__sflush_r+0x1a>
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	e7ad      	b.n	80034d0 <__sflush_r+0x1c>
 8003574:	690f      	ldr	r7, [r1, #16]
 8003576:	2f00      	cmp	r7, #0
 8003578:	d0a9      	beq.n	80034ce <__sflush_r+0x1a>
 800357a:	0793      	lsls	r3, r2, #30
 800357c:	680e      	ldr	r6, [r1, #0]
 800357e:	bf08      	it	eq
 8003580:	694b      	ldreq	r3, [r1, #20]
 8003582:	600f      	str	r7, [r1, #0]
 8003584:	bf18      	it	ne
 8003586:	2300      	movne	r3, #0
 8003588:	eba6 0807 	sub.w	r8, r6, r7
 800358c:	608b      	str	r3, [r1, #8]
 800358e:	f1b8 0f00 	cmp.w	r8, #0
 8003592:	dd9c      	ble.n	80034ce <__sflush_r+0x1a>
 8003594:	6a21      	ldr	r1, [r4, #32]
 8003596:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003598:	4643      	mov	r3, r8
 800359a:	463a      	mov	r2, r7
 800359c:	4628      	mov	r0, r5
 800359e:	47b0      	blx	r6
 80035a0:	2800      	cmp	r0, #0
 80035a2:	dc06      	bgt.n	80035b2 <__sflush_r+0xfe>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	e78e      	b.n	80034d0 <__sflush_r+0x1c>
 80035b2:	4407      	add	r7, r0
 80035b4:	eba8 0800 	sub.w	r8, r8, r0
 80035b8:	e7e9      	b.n	800358e <__sflush_r+0xda>
 80035ba:	bf00      	nop
 80035bc:	dfbffffe 	.word	0xdfbffffe

080035c0 <_fflush_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	690b      	ldr	r3, [r1, #16]
 80035c4:	4605      	mov	r5, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	b913      	cbnz	r3, 80035d0 <_fflush_r+0x10>
 80035ca:	2500      	movs	r5, #0
 80035cc:	4628      	mov	r0, r5
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	b118      	cbz	r0, 80035da <_fflush_r+0x1a>
 80035d2:	6a03      	ldr	r3, [r0, #32]
 80035d4:	b90b      	cbnz	r3, 80035da <_fflush_r+0x1a>
 80035d6:	f7ff fa99 	bl	8002b0c <__sinit>
 80035da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f3      	beq.n	80035ca <_fflush_r+0xa>
 80035e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035e4:	07d0      	lsls	r0, r2, #31
 80035e6:	d404      	bmi.n	80035f2 <_fflush_r+0x32>
 80035e8:	0599      	lsls	r1, r3, #22
 80035ea:	d402      	bmi.n	80035f2 <_fflush_r+0x32>
 80035ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ee:	f7ff fb92 	bl	8002d16 <__retarget_lock_acquire_recursive>
 80035f2:	4628      	mov	r0, r5
 80035f4:	4621      	mov	r1, r4
 80035f6:	f7ff ff5d 	bl	80034b4 <__sflush_r>
 80035fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035fc:	07da      	lsls	r2, r3, #31
 80035fe:	4605      	mov	r5, r0
 8003600:	d4e4      	bmi.n	80035cc <_fflush_r+0xc>
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	059b      	lsls	r3, r3, #22
 8003606:	d4e1      	bmi.n	80035cc <_fflush_r+0xc>
 8003608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800360a:	f7ff fb85 	bl	8002d18 <__retarget_lock_release_recursive>
 800360e:	e7dd      	b.n	80035cc <_fflush_r+0xc>

08003610 <__swbuf_r>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	460e      	mov	r6, r1
 8003614:	4614      	mov	r4, r2
 8003616:	4605      	mov	r5, r0
 8003618:	b118      	cbz	r0, 8003622 <__swbuf_r+0x12>
 800361a:	6a03      	ldr	r3, [r0, #32]
 800361c:	b90b      	cbnz	r3, 8003622 <__swbuf_r+0x12>
 800361e:	f7ff fa75 	bl	8002b0c <__sinit>
 8003622:	69a3      	ldr	r3, [r4, #24]
 8003624:	60a3      	str	r3, [r4, #8]
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	071a      	lsls	r2, r3, #28
 800362a:	d525      	bpl.n	8003678 <__swbuf_r+0x68>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	b31b      	cbz	r3, 8003678 <__swbuf_r+0x68>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	6922      	ldr	r2, [r4, #16]
 8003634:	1a98      	subs	r0, r3, r2
 8003636:	6963      	ldr	r3, [r4, #20]
 8003638:	b2f6      	uxtb	r6, r6
 800363a:	4283      	cmp	r3, r0
 800363c:	4637      	mov	r7, r6
 800363e:	dc04      	bgt.n	800364a <__swbuf_r+0x3a>
 8003640:	4621      	mov	r1, r4
 8003642:	4628      	mov	r0, r5
 8003644:	f7ff ffbc 	bl	80035c0 <_fflush_r>
 8003648:	b9e0      	cbnz	r0, 8003684 <__swbuf_r+0x74>
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	3b01      	subs	r3, #1
 800364e:	60a3      	str	r3, [r4, #8]
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	6022      	str	r2, [r4, #0]
 8003656:	701e      	strb	r6, [r3, #0]
 8003658:	6962      	ldr	r2, [r4, #20]
 800365a:	1c43      	adds	r3, r0, #1
 800365c:	429a      	cmp	r2, r3
 800365e:	d004      	beq.n	800366a <__swbuf_r+0x5a>
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	07db      	lsls	r3, r3, #31
 8003664:	d506      	bpl.n	8003674 <__swbuf_r+0x64>
 8003666:	2e0a      	cmp	r6, #10
 8003668:	d104      	bne.n	8003674 <__swbuf_r+0x64>
 800366a:	4621      	mov	r1, r4
 800366c:	4628      	mov	r0, r5
 800366e:	f7ff ffa7 	bl	80035c0 <_fflush_r>
 8003672:	b938      	cbnz	r0, 8003684 <__swbuf_r+0x74>
 8003674:	4638      	mov	r0, r7
 8003676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003678:	4621      	mov	r1, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f000 f806 	bl	800368c <__swsetup_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	d0d5      	beq.n	8003630 <__swbuf_r+0x20>
 8003684:	f04f 37ff 	mov.w	r7, #4294967295
 8003688:	e7f4      	b.n	8003674 <__swbuf_r+0x64>
	...

0800368c <__swsetup_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <__swsetup_r+0xac>)
 8003690:	4605      	mov	r5, r0
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	460c      	mov	r4, r1
 8003696:	b118      	cbz	r0, 80036a0 <__swsetup_r+0x14>
 8003698:	6a03      	ldr	r3, [r0, #32]
 800369a:	b90b      	cbnz	r3, 80036a0 <__swsetup_r+0x14>
 800369c:	f7ff fa36 	bl	8002b0c <__sinit>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036a6:	0718      	lsls	r0, r3, #28
 80036a8:	d422      	bmi.n	80036f0 <__swsetup_r+0x64>
 80036aa:	06d9      	lsls	r1, r3, #27
 80036ac:	d407      	bmi.n	80036be <__swsetup_r+0x32>
 80036ae:	2309      	movs	r3, #9
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036b6:	81a3      	strh	r3, [r4, #12]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	e034      	b.n	8003728 <__swsetup_r+0x9c>
 80036be:	0758      	lsls	r0, r3, #29
 80036c0:	d512      	bpl.n	80036e8 <__swsetup_r+0x5c>
 80036c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c4:	b141      	cbz	r1, 80036d8 <__swsetup_r+0x4c>
 80036c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036ca:	4299      	cmp	r1, r3
 80036cc:	d002      	beq.n	80036d4 <__swsetup_r+0x48>
 80036ce:	4628      	mov	r0, r5
 80036d0:	f7ff fb24 	bl	8002d1c <_free_r>
 80036d4:	2300      	movs	r3, #0
 80036d6:	6363      	str	r3, [r4, #52]	; 0x34
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	2300      	movs	r3, #0
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	6923      	ldr	r3, [r4, #16]
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f043 0308 	orr.w	r3, r3, #8
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	6923      	ldr	r3, [r4, #16]
 80036f2:	b94b      	cbnz	r3, 8003708 <__swsetup_r+0x7c>
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	d003      	beq.n	8003708 <__swsetup_r+0x7c>
 8003700:	4621      	mov	r1, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f850 	bl	80037a8 <__smakebuf_r>
 8003708:	89a0      	ldrh	r0, [r4, #12]
 800370a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800370e:	f010 0301 	ands.w	r3, r0, #1
 8003712:	d00a      	beq.n	800372a <__swsetup_r+0x9e>
 8003714:	2300      	movs	r3, #0
 8003716:	60a3      	str	r3, [r4, #8]
 8003718:	6963      	ldr	r3, [r4, #20]
 800371a:	425b      	negs	r3, r3
 800371c:	61a3      	str	r3, [r4, #24]
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	b943      	cbnz	r3, 8003734 <__swsetup_r+0xa8>
 8003722:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003726:	d1c4      	bne.n	80036b2 <__swsetup_r+0x26>
 8003728:	bd38      	pop	{r3, r4, r5, pc}
 800372a:	0781      	lsls	r1, r0, #30
 800372c:	bf58      	it	pl
 800372e:	6963      	ldrpl	r3, [r4, #20]
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	e7f4      	b.n	800371e <__swsetup_r+0x92>
 8003734:	2000      	movs	r0, #0
 8003736:	e7f7      	b.n	8003728 <__swsetup_r+0x9c>
 8003738:	10000070 	.word	0x10000070

0800373c <_sbrk_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d06      	ldr	r5, [pc, #24]	; (8003758 <_sbrk_r+0x1c>)
 8003740:	2300      	movs	r3, #0
 8003742:	4604      	mov	r4, r0
 8003744:	4608      	mov	r0, r1
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	f7ff f8f4 	bl	8002934 <_sbrk>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_sbrk_r+0x1a>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	b103      	cbz	r3, 8003756 <_sbrk_r+0x1a>
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	20016d94 	.word	0x20016d94

0800375c <__swhatbuf_r>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	460c      	mov	r4, r1
 8003760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003764:	2900      	cmp	r1, #0
 8003766:	b096      	sub	sp, #88	; 0x58
 8003768:	4615      	mov	r5, r2
 800376a:	461e      	mov	r6, r3
 800376c:	da0d      	bge.n	800378a <__swhatbuf_r+0x2e>
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	bf0c      	ite	eq
 800377a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800377e:	2340      	movne	r3, #64	; 0x40
 8003780:	2000      	movs	r0, #0
 8003782:	6031      	str	r1, [r6, #0]
 8003784:	602b      	str	r3, [r5, #0]
 8003786:	b016      	add	sp, #88	; 0x58
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	466a      	mov	r2, sp
 800378c:	f000 f848 	bl	8003820 <_fstat_r>
 8003790:	2800      	cmp	r0, #0
 8003792:	dbec      	blt.n	800376e <__swhatbuf_r+0x12>
 8003794:	9901      	ldr	r1, [sp, #4]
 8003796:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800379a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800379e:	4259      	negs	r1, r3
 80037a0:	4159      	adcs	r1, r3
 80037a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a6:	e7eb      	b.n	8003780 <__swhatbuf_r+0x24>

080037a8 <__smakebuf_r>:
 80037a8:	898b      	ldrh	r3, [r1, #12]
 80037aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037ac:	079d      	lsls	r5, r3, #30
 80037ae:	4606      	mov	r6, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	d507      	bpl.n	80037c4 <__smakebuf_r+0x1c>
 80037b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	6123      	str	r3, [r4, #16]
 80037bc:	2301      	movs	r3, #1
 80037be:	6163      	str	r3, [r4, #20]
 80037c0:	b002      	add	sp, #8
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	ab01      	add	r3, sp, #4
 80037c6:	466a      	mov	r2, sp
 80037c8:	f7ff ffc8 	bl	800375c <__swhatbuf_r>
 80037cc:	9900      	ldr	r1, [sp, #0]
 80037ce:	4605      	mov	r5, r0
 80037d0:	4630      	mov	r0, r6
 80037d2:	f7ff fb0f 	bl	8002df4 <_malloc_r>
 80037d6:	b948      	cbnz	r0, 80037ec <__smakebuf_r+0x44>
 80037d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037dc:	059a      	lsls	r2, r3, #22
 80037de:	d4ef      	bmi.n	80037c0 <__smakebuf_r+0x18>
 80037e0:	f023 0303 	bic.w	r3, r3, #3
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	81a3      	strh	r3, [r4, #12]
 80037ea:	e7e3      	b.n	80037b4 <__smakebuf_r+0xc>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	6020      	str	r0, [r4, #0]
 80037f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	9b00      	ldr	r3, [sp, #0]
 80037f8:	6163      	str	r3, [r4, #20]
 80037fa:	9b01      	ldr	r3, [sp, #4]
 80037fc:	6120      	str	r0, [r4, #16]
 80037fe:	b15b      	cbz	r3, 8003818 <__smakebuf_r+0x70>
 8003800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003804:	4630      	mov	r0, r6
 8003806:	f000 f81d 	bl	8003844 <_isatty_r>
 800380a:	b128      	cbz	r0, 8003818 <__smakebuf_r+0x70>
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	81a3      	strh	r3, [r4, #12]
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	431d      	orrs	r5, r3
 800381c:	81a5      	strh	r5, [r4, #12]
 800381e:	e7cf      	b.n	80037c0 <__smakebuf_r+0x18>

08003820 <_fstat_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4d07      	ldr	r5, [pc, #28]	; (8003840 <_fstat_r+0x20>)
 8003824:	2300      	movs	r3, #0
 8003826:	4604      	mov	r4, r0
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	f7ff f858 	bl	80028e2 <_fstat>
 8003832:	1c43      	adds	r3, r0, #1
 8003834:	d102      	bne.n	800383c <_fstat_r+0x1c>
 8003836:	682b      	ldr	r3, [r5, #0]
 8003838:	b103      	cbz	r3, 800383c <_fstat_r+0x1c>
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	bd38      	pop	{r3, r4, r5, pc}
 800383e:	bf00      	nop
 8003840:	20016d94 	.word	0x20016d94

08003844 <_isatty_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d06      	ldr	r5, [pc, #24]	; (8003860 <_isatty_r+0x1c>)
 8003848:	2300      	movs	r3, #0
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	f7ff f857 	bl	8002902 <_isatty>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d102      	bne.n	800385e <_isatty_r+0x1a>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b103      	cbz	r3, 800385e <_isatty_r+0x1a>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	20016d94 	.word	0x20016d94

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
